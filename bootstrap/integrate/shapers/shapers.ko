import "github.com/kocircuit/kocircuit/bootstrap/types"

Identity(forType?) {
	return: (
		identity: ()
		fromType: Expect(forType)
		toType: forType
	)
}

// AnyEmpty is a shaper to an empty type.
AnyEmpty(fromType, toType) {
	return: (anyEmpty: (), fromType: Expect(fromType), toType: Expect(toType))
}

// EmptyOptional is a shaper from an empty type to an optional type.
EmptyOptional(fromType, toType) {
	return: (emptyOptional: (), fromType: Expect(fromType), toType: Expect(toType))
}

// EmptySeries is a shaper from a empty type to a series type.
EmptySeries(fromType, toType) {
	return: (emptySeries: (), fromType: Expect(fromType), toType: Expect(toType))
}

OptionalOptional(elemShaper, fromType, toType) {
	return: ( // shaper
		optionalOptional: ( // optional-optional shaper
			elemShaper: elemShaper
		)
		fromType: Expect(fromType)
		toType: Expect(toType)
	)
}

AnyOptional(elemShaper, fromType, toType) {
	return: ( // shaper
		anyOptional: ( // optional-optional shaper
			elemShaper: elemShaper
		)
		fromType: Expect(fromType)
		toType: Expect(toType)
	)
}

OptionalSeries(elemShaper, fromType, toType) {
	return: ( // shaper
		optionalSeries: ( // optional-optional shaper
			elemShaper: elemShaper
		)
		fromType: Expect(fromType)
		toType: Expect(toType)
	)
}

SeriesSeries(elemShaper, fromType, toType) {
	return: ( // shaper
		seriesSeries: ( // optional-optional shaper
			elemShaper: elemShaper
		)
		fromType: Expect(fromType)
		toType: Expect(toType)
	)
}

AnySeries(elemShaper, fromType, toType) {
	return: ( // shaper
		anySeries: ( // optional-optional shaper
			elemShaper: elemShaper
		)
		fromType: Expect(fromType)
		toType: Expect(toType)
	)
}

StructureStructure(fieldShapers, fromType, toType) {
	return: ( // shaper
		structureStructure: ( // structure-structure shaper
			fieldShapers: fieldShapers
		)
		fromType: Expect(fromType)
		toType: Expect(toType)
	)
}

Field(name, shaper) {
	return: ( // field shaper
		name: String(name)
		shaper: Expect(shaper)
	)
}

UnionUnion(varietyShapers, fromType, toType) {
	return: ( // shaper
		unionUnion: ( // union-union shaper
			varietyShapers: varietyShapers
		)
		fromType: Expect(fromType)
		toType: Expect(toType)
	)
}

Variety(transform, fieldShapers) {
	return: (
		transform: Expect(transform)
		fieldShapers: Expect(fieldShapers)
	)
}
