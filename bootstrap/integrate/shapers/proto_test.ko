import "github.com/kocircuit/kocircuit/bootstrap/types"

// ko play github.com/kocircuit/kocircuit/bootstrap/integrate/shapers/TestProto
TestProto() {
	emptyType: types.EmptyType()
	boolType: types.BoolType()
	stringType: types.StringType()
	integerType: types.IntegerType()
	optionalIntegerType: types.OptionalType(integerType)
	emptySeriesType: types.SeriesType(emptyType)
	stringSeriesType: types.SeriesType(stringType)
	integerSeriesType: types.SeriesType(integerType)
	f1: (
		types.Field(name: "g1", type: boolType)
		types.Field(name: "g2", type: stringType)
	)
	f2: (
		types.Field(name: "g1", type: boolType)
		types.Field(name: "g2", type: stringSeriesType)
	)
	s1: types.StructureType(f1)
	s2: types.StructureType(f2)
	transform: types.Operator(pkg: "pkg", name: "M")
	v1: types.VarietyType(transform: transform, fields: f1)
	v2: types.VarietyType(transform: transform, fields: f2)
	fieldShapers12: (
		Field(name: "g1", shaper: Identity(forType: boolType))
		Field(
			name: "g2"
			shaper: AnySeries(
				elemShaper: Identity(forType: stringType)
				fromType: stringType
				toType: stringSeriesType
			)
		)
	)
	return: And(
		testShaperProto(Identity(forType: boolType))
		testShaperProto(AnyEmpty(fromType: integerType, toType: emptyType))
		testShaperProto(EmptyOptional(fromType: integerType, toType: optionalIntegerType))
		testShaperProto(EmptySeries(fromType: integerType, toType: integerSeriesType))
		testShaperProto(
			OptionalOptional(
				elemShaper: AnyEmpty(fromType: integerType, toType: emptyType)
				fromType: integerSeriesType
				toType: emptySeriesType
			)
		)
		testShaperProto(
			AnyOptional(
				elemShaper: Identity(forType: integerType)
				fromType: integerType
				toType: optionalIntegerType
			)
		)
		testShaperProto(
			OptionalSeries(
				elemShaper: Identity(forType: integerType)
				fromType: optionalIntegerType
				toType: integerSeriesType
			)
		)
		testShaperProto(
			SeriesSeries(
				elemShaper: Identity(forType: integerType)
				fromType: integerSeriesType
				toType: integerSeriesType
			)
		)
		testShaperProto(
			AnySeries(
				elemShaper: Identity(forType: integerType)
				fromType: integerType
				toType: integerSeriesType
			)
		)
		testShaperProto(
			StructureStructure(
				fieldShapers: fieldShapers12
				fromType: s1
				toType: s2
			)
		)
		testShaperProto(
			UnionUnion(
				varietyShapers: Variety(transform: transform, fieldShapers: fieldShapers12)
				fromType: types.UnionType(v1)
				toType: types.UnionType(v2)
			)
		)
	) // and
}

testShaperProto(shaper?) {
	proto: Proto(shaper) // test type compliance
	marshaled: Marshal(proto)
	return: Equal(Unmarshal(marshaled), proto)
}
