import "github.com/kocircuit/kocircuit/lib/series"
import "github.com/kocircuit/kocircuit/lib/set"

import "github.com/kocircuit/kocircuit/bootstrap/integrate/shapers"
import "github.com/kocircuit/kocircuit/bootstrap/context/place" as ko_place
import "github.com/kocircuit/kocircuit/bootstrap/types"

integrateVarietiesToVarieties(place, fromVarieties, toVarieties) {
	return: series.Map(
		over: fromVarieties
		with: integrateVarietyToVarieties[place: place, toVarieties: toVarieties]
	)
}

integrateVarietyToVarieties(place, fromVariety?, toVarieties) {
	functional: types.VarietyTypeFunctional(fromVariety)
	toVariety: set.Find(
		key: functional
		objects: toVarieties
		ObjectKey: types.VarietyTypeFunctional
	)
	return: integrateVarietyToVariety(
		place: place
		fromVariety: fromVariety
		toVariety: When(
			have: toVariety
			then: Return
			else: ko_place.Error[
				place: place
				error: (
					integrating: "no matching variety"
					fromVariety: fromVariety
					toVarieties: toVarieties
				)
			]
		)
	)
}

integrateVarietyToVariety(place, fromVariety, toVariety) {
	return: shapers.Variety(
		functional: types.VarietyTypeFunctional(fromVariety)
		fieldShapers: integrateFieldsToFields(
			place: place
			fromFields: types.VarietyTypeFields(fromVariety)
			toFields: types.VarietyTypeFields(toVariety)
		)
	)
}
