// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: asm.proto

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		asm.proto

	It has these top-level messages:
		Func
		Address
		Step
		Logic
		Gather
		Enter
		Leave
		Link
		Select
		Augment
		Field
		Invoke
		Literal
		Figure
		Transform
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import ko_bootstrap_shapers "github.com/kocircuit/kocircuit/bootstrap/integrate/shapers/proto"
import ko_bootstrap_source "github.com/kocircuit/kocircuit/bootstrap/source/proto"
import ko_bootstrap_types "github.com/kocircuit/kocircuit/bootstrap/types/proto"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Func struct {
	Address          *Address                    `protobuf:"bytes,1,req,name=address" json:"address,omitempty"`
	Arg              *ko_bootstrap_types.Type    `protobuf:"bytes,2,req,name=arg" json:"arg,omitempty"`
	Returns          *ko_bootstrap_types.Type    `protobuf:"bytes,3,req,name=returns" json:"returns,omitempty"`
	Step             []*Step                     `protobuf:"bytes,4,rep,name=step" json:"step,omitempty"`
	Source           *ko_bootstrap_source.Source `protobuf:"bytes,5,opt,name=source" json:"source,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *Func) Reset()                    { *m = Func{} }
func (m *Func) String() string            { return proto1.CompactTextString(m) }
func (*Func) ProtoMessage()               {}
func (*Func) Descriptor() ([]byte, []int) { return fileDescriptorAsm, []int{0} }

func (m *Func) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Func) GetArg() *ko_bootstrap_types.Type {
	if m != nil {
		return m.Arg
	}
	return nil
}

func (m *Func) GetReturns() *ko_bootstrap_types.Type {
	if m != nil {
		return m.Returns
	}
	return nil
}

func (m *Func) GetStep() []*Step {
	if m != nil {
		return m.Step
	}
	return nil
}

func (m *Func) GetSource() *ko_bootstrap_source.Source {
	if m != nil {
		return m.Source
	}
	return nil
}

type Address struct {
	Pkg              *string `protobuf:"bytes,1,req,name=pkg" json:"pkg,omitempty"`
	Name             *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto1.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptorAsm, []int{1} }

func (m *Address) GetPkg() string {
	if m != nil && m.Pkg != nil {
		return *m.Pkg
	}
	return ""
}

func (m *Address) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type Step struct {
	Label            *string                     `protobuf:"bytes,1,req,name=label" json:"label,omitempty"`
	Returns          *ko_bootstrap_types.Type    `protobuf:"bytes,2,req,name=returns" json:"returns,omitempty"`
	Source           *ko_bootstrap_source.Source `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
	Logic            *Logic                      `protobuf:"bytes,4,req,name=logic" json:"logic,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *Step) Reset()                    { *m = Step{} }
func (m *Step) String() string            { return proto1.CompactTextString(m) }
func (*Step) ProtoMessage()               {}
func (*Step) Descriptor() ([]byte, []int) { return fileDescriptorAsm, []int{2} }

func (m *Step) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *Step) GetReturns() *ko_bootstrap_types.Type {
	if m != nil {
		return m.Returns
	}
	return nil
}

func (m *Step) GetSource() *ko_bootstrap_source.Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Step) GetLogic() *Logic {
	if m != nil {
		return m.Logic
	}
	return nil
}

type Logic struct {
	Enter            *Enter   `protobuf:"bytes,1,opt,name=enter" json:"enter,omitempty"`
	Leave            *Leave   `protobuf:"bytes,2,opt,name=leave" json:"leave,omitempty"`
	Link             *Link    `protobuf:"bytes,3,opt,name=link" json:"link,omitempty"`
	Select           *Select  `protobuf:"bytes,4,opt,name=select" json:"select,omitempty"`
	Augment          *Augment `protobuf:"bytes,5,opt,name=augment" json:"augment,omitempty"`
	Invoke           *Invoke  `protobuf:"bytes,6,opt,name=invoke" json:"invoke,omitempty"`
	Literal          *Literal `protobuf:"bytes,7,opt,name=literal" json:"literal,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Logic) Reset()                    { *m = Logic{} }
func (m *Logic) String() string            { return proto1.CompactTextString(m) }
func (*Logic) ProtoMessage()               {}
func (*Logic) Descriptor() ([]byte, []int) { return fileDescriptorAsm, []int{3} }

func (m *Logic) GetEnter() *Enter {
	if m != nil {
		return m.Enter
	}
	return nil
}

func (m *Logic) GetLeave() *Leave {
	if m != nil {
		return m.Leave
	}
	return nil
}

func (m *Logic) GetLink() *Link {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *Logic) GetSelect() *Select {
	if m != nil {
		return m.Select
	}
	return nil
}

func (m *Logic) GetAugment() *Augment {
	if m != nil {
		return m.Augment
	}
	return nil
}

func (m *Logic) GetInvoke() *Invoke {
	if m != nil {
		return m.Invoke
	}
	return nil
}

func (m *Logic) GetLiteral() *Literal {
	if m != nil {
		return m.Literal
	}
	return nil
}

// Gather
type Gather struct {
	Step             *string                      `protobuf:"bytes,1,req,name=step" json:"step,omitempty"`
	Shaper           *ko_bootstrap_shapers.Shaper `protobuf:"bytes,2,req,name=shaper" json:"shaper,omitempty"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *Gather) Reset()                    { *m = Gather{} }
func (m *Gather) String() string            { return proto1.CompactTextString(m) }
func (*Gather) ProtoMessage()               {}
func (*Gather) Descriptor() ([]byte, []int) { return fileDescriptorAsm, []int{4} }

func (m *Gather) GetStep() string {
	if m != nil && m.Step != nil {
		return *m.Step
	}
	return ""
}

func (m *Gather) GetShaper() *ko_bootstrap_shapers.Shaper {
	if m != nil {
		return m.Shaper
	}
	return nil
}

type Enter struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Enter) Reset()                    { *m = Enter{} }
func (m *Enter) String() string            { return proto1.CompactTextString(m) }
func (*Enter) ProtoMessage()               {}
func (*Enter) Descriptor() ([]byte, []int) { return fileDescriptorAsm, []int{5} }

type Leave struct {
	Object           *Gather `protobuf:"bytes,1,req,name=object" json:"object,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Leave) Reset()                    { *m = Leave{} }
func (m *Leave) String() string            { return proto1.CompactTextString(m) }
func (*Leave) ProtoMessage()               {}
func (*Leave) Descriptor() ([]byte, []int) { return fileDescriptorAsm, []int{6} }

func (m *Leave) GetObject() *Gather {
	if m != nil {
		return m.Object
	}
	return nil
}

type Link struct {
	Object           *Gather `protobuf:"bytes,1,req,name=object" json:"object,omitempty"`
	Name             *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	Monadic          *bool   `protobuf:"varint,3,req,name=monadic" json:"monadic,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Link) Reset()                    { *m = Link{} }
func (m *Link) String() string            { return proto1.CompactTextString(m) }
func (*Link) ProtoMessage()               {}
func (*Link) Descriptor() ([]byte, []int) { return fileDescriptorAsm, []int{7} }

func (m *Link) GetObject() *Gather {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *Link) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Link) GetMonadic() bool {
	if m != nil && m.Monadic != nil {
		return *m.Monadic
	}
	return false
}

type Select struct {
	Object           *Gather `protobuf:"bytes,1,req,name=object" json:"object,omitempty"`
	Name             *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Select) Reset()                    { *m = Select{} }
func (m *Select) String() string            { return proto1.CompactTextString(m) }
func (*Select) ProtoMessage()               {}
func (*Select) Descriptor() ([]byte, []int) { return fileDescriptorAsm, []int{8} }

func (m *Select) GetObject() *Gather {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *Select) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type Augment struct {
	Object           *Gather  `protobuf:"bytes,1,req,name=object" json:"object,omitempty"`
	Field            []*Field `protobuf:"bytes,2,rep,name=field" json:"field,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Augment) Reset()                    { *m = Augment{} }
func (m *Augment) String() string            { return proto1.CompactTextString(m) }
func (*Augment) ProtoMessage()               {}
func (*Augment) Descriptor() ([]byte, []int) { return fileDescriptorAsm, []int{9} }

func (m *Augment) GetObject() *Gather {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *Augment) GetField() []*Field {
	if m != nil {
		return m.Field
	}
	return nil
}

type Field struct {
	Name             *string   `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Gather           []*Gather `protobuf:"bytes,2,rep,name=gather" json:"gather,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Field) Reset()                    { *m = Field{} }
func (m *Field) String() string            { return proto1.CompactTextString(m) }
func (*Field) ProtoMessage()               {}
func (*Field) Descriptor() ([]byte, []int) { return fileDescriptorAsm, []int{10} }

func (m *Field) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Field) GetGather() []*Gather {
	if m != nil {
		return m.Gather
	}
	return nil
}

type Invoke struct {
	Object           *Gather `protobuf:"bytes,1,req,name=object" json:"object,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Invoke) Reset()                    { *m = Invoke{} }
func (m *Invoke) String() string            { return proto1.CompactTextString(m) }
func (*Invoke) ProtoMessage()               {}
func (*Invoke) Descriptor() ([]byte, []int) { return fileDescriptorAsm, []int{11} }

func (m *Invoke) GetObject() *Gather {
	if m != nil {
		return m.Object
	}
	return nil
}

type Literal struct {
	Figure           *Figure `protobuf:"bytes,1,req,name=figure" json:"figure,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Literal) Reset()                    { *m = Literal{} }
func (m *Literal) String() string            { return proto1.CompactTextString(m) }
func (*Literal) ProtoMessage()               {}
func (*Literal) Descriptor() ([]byte, []int) { return fileDescriptorAsm, []int{12} }

func (m *Literal) GetFigure() *Figure {
	if m != nil {
		return m.Figure
	}
	return nil
}

type Figure struct {
	Int64            *int64     `protobuf:"varint,1,opt,name=int64" json:"int64,omitempty"`
	String_          *string    `protobuf:"bytes,2,opt,name=string" json:"string,omitempty"`
	Bool             *bool      `protobuf:"varint,3,opt,name=bool" json:"bool,omitempty"`
	Float64          *float64   `protobuf:"fixed64,4,opt,name=float64" json:"float64,omitempty"`
	Transform        *Transform `protobuf:"bytes,5,opt,name=transform" json:"transform,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Figure) Reset()                    { *m = Figure{} }
func (m *Figure) String() string            { return proto1.CompactTextString(m) }
func (*Figure) ProtoMessage()               {}
func (*Figure) Descriptor() ([]byte, []int) { return fileDescriptorAsm, []int{13} }

func (m *Figure) GetInt64() int64 {
	if m != nil && m.Int64 != nil {
		return *m.Int64
	}
	return 0
}

func (m *Figure) GetString_() string {
	if m != nil && m.String_ != nil {
		return *m.String_
	}
	return ""
}

func (m *Figure) GetBool() bool {
	if m != nil && m.Bool != nil {
		return *m.Bool
	}
	return false
}

func (m *Figure) GetFloat64() float64 {
	if m != nil && m.Float64 != nil {
		return *m.Float64
	}
	return 0
}

func (m *Figure) GetTransform() *Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

type Transform struct {
	Operator         *Address `protobuf:"bytes,1,opt,name=operator" json:"operator,omitempty"`
	Func             *Address `protobuf:"bytes,2,opt,name=func" json:"func,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Transform) Reset()                    { *m = Transform{} }
func (m *Transform) String() string            { return proto1.CompactTextString(m) }
func (*Transform) ProtoMessage()               {}
func (*Transform) Descriptor() ([]byte, []int) { return fileDescriptorAsm, []int{14} }

func (m *Transform) GetOperator() *Address {
	if m != nil {
		return m.Operator
	}
	return nil
}

func (m *Transform) GetFunc() *Address {
	if m != nil {
		return m.Func
	}
	return nil
}

func init() {
	proto1.RegisterType((*Func)(nil), "ko.bootstrap.asm.Func")
	proto1.RegisterType((*Address)(nil), "ko.bootstrap.asm.Address")
	proto1.RegisterType((*Step)(nil), "ko.bootstrap.asm.Step")
	proto1.RegisterType((*Logic)(nil), "ko.bootstrap.asm.Logic")
	proto1.RegisterType((*Gather)(nil), "ko.bootstrap.asm.Gather")
	proto1.RegisterType((*Enter)(nil), "ko.bootstrap.asm.Enter")
	proto1.RegisterType((*Leave)(nil), "ko.bootstrap.asm.Leave")
	proto1.RegisterType((*Link)(nil), "ko.bootstrap.asm.Link")
	proto1.RegisterType((*Select)(nil), "ko.bootstrap.asm.Select")
	proto1.RegisterType((*Augment)(nil), "ko.bootstrap.asm.Augment")
	proto1.RegisterType((*Field)(nil), "ko.bootstrap.asm.Field")
	proto1.RegisterType((*Invoke)(nil), "ko.bootstrap.asm.Invoke")
	proto1.RegisterType((*Literal)(nil), "ko.bootstrap.asm.Literal")
	proto1.RegisterType((*Figure)(nil), "ko.bootstrap.asm.Figure")
	proto1.RegisterType((*Transform)(nil), "ko.bootstrap.asm.Transform")
}
func (m *Func) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Func) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Address == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAsm(dAtA, i, uint64(m.Address.Size()))
		n1, err := m.Address.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Arg == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAsm(dAtA, i, uint64(m.Arg.Size()))
		n2, err := m.Arg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Returns == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAsm(dAtA, i, uint64(m.Returns.Size()))
		n3, err := m.Returns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Step) > 0 {
		for _, msg := range m.Step {
			dAtA[i] = 0x22
			i++
			i = encodeVarintAsm(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Source != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAsm(dAtA, i, uint64(m.Source.Size()))
		n4, err := m.Source.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Address) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Address) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pkg == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAsm(dAtA, i, uint64(len(*m.Pkg)))
		i += copy(dAtA[i:], *m.Pkg)
	}
	if m.Name == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAsm(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Step) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Step) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Label == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAsm(dAtA, i, uint64(len(*m.Label)))
		i += copy(dAtA[i:], *m.Label)
	}
	if m.Returns == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAsm(dAtA, i, uint64(m.Returns.Size()))
		n5, err := m.Returns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Source != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAsm(dAtA, i, uint64(m.Source.Size()))
		n6, err := m.Source.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Logic == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAsm(dAtA, i, uint64(m.Logic.Size()))
		n7, err := m.Logic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Logic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Logic) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Enter != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAsm(dAtA, i, uint64(m.Enter.Size()))
		n8, err := m.Enter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Leave != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAsm(dAtA, i, uint64(m.Leave.Size()))
		n9, err := m.Leave.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Link != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAsm(dAtA, i, uint64(m.Link.Size()))
		n10, err := m.Link.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Select != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAsm(dAtA, i, uint64(m.Select.Size()))
		n11, err := m.Select.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Augment != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAsm(dAtA, i, uint64(m.Augment.Size()))
		n12, err := m.Augment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Invoke != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAsm(dAtA, i, uint64(m.Invoke.Size()))
		n13, err := m.Invoke.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Literal != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAsm(dAtA, i, uint64(m.Literal.Size()))
		n14, err := m.Literal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Gather) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gather) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Step == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAsm(dAtA, i, uint64(len(*m.Step)))
		i += copy(dAtA[i:], *m.Step)
	}
	if m.Shaper == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAsm(dAtA, i, uint64(m.Shaper.Size()))
		n15, err := m.Shaper.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Enter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Enter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Leave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Leave) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Object == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAsm(dAtA, i, uint64(m.Object.Size()))
		n16, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Link) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Link) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Object == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAsm(dAtA, i, uint64(m.Object.Size()))
		n17, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.Name == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAsm(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Monadic == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x18
		i++
		if *m.Monadic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Select) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Select) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Object == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAsm(dAtA, i, uint64(m.Object.Size()))
		n18, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.Name == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAsm(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Augment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Augment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Object == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAsm(dAtA, i, uint64(m.Object.Size()))
		n19, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if len(m.Field) > 0 {
		for _, msg := range m.Field {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAsm(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Field) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Field) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAsm(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if len(m.Gather) > 0 {
		for _, msg := range m.Gather {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAsm(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Invoke) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Invoke) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Object == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAsm(dAtA, i, uint64(m.Object.Size()))
		n20, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Literal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Literal) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Figure == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAsm(dAtA, i, uint64(m.Figure.Size()))
		n21, err := m.Figure.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Figure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Figure) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Int64 != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAsm(dAtA, i, uint64(*m.Int64))
	}
	if m.String_ != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAsm(dAtA, i, uint64(len(*m.String_)))
		i += copy(dAtA[i:], *m.String_)
	}
	if m.Bool != nil {
		dAtA[i] = 0x18
		i++
		if *m.Bool {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Float64 != nil {
		dAtA[i] = 0x21
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Float64))))
		i += 8
	}
	if m.Transform != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAsm(dAtA, i, uint64(m.Transform.Size()))
		n22, err := m.Transform.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Transform) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transform) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operator != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAsm(dAtA, i, uint64(m.Operator.Size()))
		n23, err := m.Operator.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.Func != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAsm(dAtA, i, uint64(m.Func.Size()))
		n24, err := m.Func.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintAsm(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Func) Size() (n int) {
	var l int
	_ = l
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.Arg != nil {
		l = m.Arg.Size()
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.Returns != nil {
		l = m.Returns.Size()
		n += 1 + l + sovAsm(uint64(l))
	}
	if len(m.Step) > 0 {
		for _, e := range m.Step {
			l = e.Size()
			n += 1 + l + sovAsm(uint64(l))
		}
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Address) Size() (n int) {
	var l int
	_ = l
	if m.Pkg != nil {
		l = len(*m.Pkg)
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Step) Size() (n int) {
	var l int
	_ = l
	if m.Label != nil {
		l = len(*m.Label)
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.Returns != nil {
		l = m.Returns.Size()
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.Logic != nil {
		l = m.Logic.Size()
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Logic) Size() (n int) {
	var l int
	_ = l
	if m.Enter != nil {
		l = m.Enter.Size()
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.Leave != nil {
		l = m.Leave.Size()
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.Link != nil {
		l = m.Link.Size()
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.Select != nil {
		l = m.Select.Size()
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.Augment != nil {
		l = m.Augment.Size()
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.Invoke != nil {
		l = m.Invoke.Size()
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.Literal != nil {
		l = m.Literal.Size()
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Gather) Size() (n int) {
	var l int
	_ = l
	if m.Step != nil {
		l = len(*m.Step)
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.Shaper != nil {
		l = m.Shaper.Size()
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Enter) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Leave) Size() (n int) {
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Link) Size() (n int) {
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.Monadic != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Select) Size() (n int) {
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Augment) Size() (n int) {
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovAsm(uint64(l))
	}
	if len(m.Field) > 0 {
		for _, e := range m.Field {
			l = e.Size()
			n += 1 + l + sovAsm(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Field) Size() (n int) {
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovAsm(uint64(l))
	}
	if len(m.Gather) > 0 {
		for _, e := range m.Gather {
			l = e.Size()
			n += 1 + l + sovAsm(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Invoke) Size() (n int) {
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Literal) Size() (n int) {
	var l int
	_ = l
	if m.Figure != nil {
		l = m.Figure.Size()
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Figure) Size() (n int) {
	var l int
	_ = l
	if m.Int64 != nil {
		n += 1 + sovAsm(uint64(*m.Int64))
	}
	if m.String_ != nil {
		l = len(*m.String_)
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.Bool != nil {
		n += 2
	}
	if m.Float64 != nil {
		n += 9
	}
	if m.Transform != nil {
		l = m.Transform.Size()
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Transform) Size() (n int) {
	var l int
	_ = l
	if m.Operator != nil {
		l = m.Operator.Size()
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.Func != nil {
		l = m.Func.Size()
		n += 1 + l + sovAsm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAsm(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAsm(x uint64) (n int) {
	return sovAsm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Func) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Func: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Func: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Arg == nil {
				m.Arg = &ko_bootstrap_types.Type{}
			}
			if err := m.Arg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Returns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Returns == nil {
				m.Returns = &ko_bootstrap_types.Type{}
			}
			if err := m.Returns.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = append(m.Step, &Step{})
			if err := m.Step[len(m.Step)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &ko_bootstrap_source.Source{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Address) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pkg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Pkg = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipAsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Step) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Step: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Step: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Label = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Returns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Returns == nil {
				m.Returns = &ko_bootstrap_types.Type{}
			}
			if err := m.Returns.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &ko_bootstrap_source.Source{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Logic == nil {
				m.Logic = &Logic{}
			}
			if err := m.Logic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipAsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Logic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Logic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Logic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enter == nil {
				m.Enter = &Enter{}
			}
			if err := m.Enter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leave", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Leave == nil {
				m.Leave = &Leave{}
			}
			if err := m.Leave.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Link == nil {
				m.Link = &Link{}
			}
			if err := m.Link.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Select", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Select == nil {
				m.Select = &Select{}
			}
			if err := m.Select.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Augment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Augment == nil {
				m.Augment = &Augment{}
			}
			if err := m.Augment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invoke", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Invoke == nil {
				m.Invoke = &Invoke{}
			}
			if err := m.Invoke.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Literal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Literal == nil {
				m.Literal = &Literal{}
			}
			if err := m.Literal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Gather) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gather: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gather: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Step = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shaper", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shaper == nil {
				m.Shaper = &ko_bootstrap_shapers.Shaper{}
			}
			if err := m.Shaper.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipAsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Enter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Enter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Enter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Leave) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Leave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Leave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Gather{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipAsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Link) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Link: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Link: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Gather{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monadic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Monadic = &b
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipAsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Select) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Select: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Select: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Gather{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipAsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Augment) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Augment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Augment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Gather{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = append(m.Field, &Field{})
			if err := m.Field[len(m.Field)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Field) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Field: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Field: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gather", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gather = append(m.Gather, &Gather{})
			if err := m.Gather[len(m.Gather)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Invoke) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Invoke: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Invoke: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Gather{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipAsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Literal) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Literal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Literal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Figure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Figure == nil {
				m.Figure = &Figure{}
			}
			if err := m.Figure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipAsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Figure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Figure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Figure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Int64 = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.String_ = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Bool = &b
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float64", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Float64 = &v2
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transform", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transform == nil {
				m.Transform = &Transform{}
			}
			if err := m.Transform.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transform) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transform: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transform: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operator == nil {
				m.Operator = &Address{}
			}
			if err := m.Operator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Func", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Func == nil {
				m.Func = &Address{}
			}
			if err := m.Func.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAsm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAsm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAsm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAsm
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAsm
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAsm(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAsm = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAsm   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("asm.proto", fileDescriptorAsm) }

var fileDescriptorAsm = []byte{
	// 752 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0x4f, 0x4f, 0xdb, 0x48,
	0x14, 0xc0, 0xd7, 0x89, 0xff, 0x90, 0xc7, 0x05, 0x8d, 0x56, 0xe0, 0x65, 0x57, 0x11, 0xf2, 0x09,
	0x21, 0x91, 0xa0, 0xc0, 0xae, 0xc4, 0xee, 0x65, 0x41, 0x2a, 0x55, 0xa5, 0x94, 0xc3, 0xc0, 0xa9,
	0xb7, 0x89, 0x33, 0x31, 0x26, 0x8e, 0xc7, 0x1d, 0x8f, 0x91, 0xf8, 0x26, 0xbd, 0xf5, 0x4b, 0xf4,
	0x43, 0xf4, 0xd8, 0x6f, 0xd0, 0x8a, 0x7e, 0x8d, 0x1e, 0xaa, 0x79, 0x33, 0x0e, 0xff, 0x1c, 0x1a,
	0xaa, 0x9e, 0x32, 0xcf, 0xef, 0xf7, 0xfe, 0xbf, 0x99, 0x40, 0x87, 0x95, 0xb3, 0x5e, 0x21, 0x85,
	0x12, 0x64, 0x6d, 0x2a, 0x7a, 0x23, 0x21, 0x54, 0xa9, 0x24, 0x2b, 0x7a, 0xac, 0x9c, 0x6d, 0x9e,
	0x26, 0xa9, 0xba, 0xa8, 0x46, 0xbd, 0x58, 0xcc, 0xfa, 0x53, 0x11, 0xa7, 0x32, 0xae, 0x52, 0x75,
	0xe7, 0x34, 0xa7, 0xfb, 0x69, 0xae, 0x78, 0x22, 0x99, 0xe2, 0xfd, 0xf2, 0x82, 0x15, 0x5c, 0x96,
	0x7d, 0xf4, 0x59, 0x4b, 0x26, 0xc2, 0xe6, 0xf1, 0xd2, 0xfe, 0x4a, 0x51, 0xc9, 0x98, 0xd7, 0x4e,
	0x50, 0xb0, 0x3e, 0xfe, 0x5f, 0xda, 0x87, 0xba, 0x2e, 0x78, 0x9d, 0x07, 0x9e, 0x8d, 0x87, 0xe8,
	0x9b, 0x03, 0xee, 0x49, 0x95, 0xc7, 0x64, 0x1f, 0x02, 0x36, 0x1e, 0x4b, 0x5e, 0x96, 0xa1, 0xb3,
	0xd5, 0xda, 0x5e, 0x1d, 0xfc, 0xd1, 0x7b, 0xd8, 0x82, 0xde, 0x91, 0x01, 0x68, 0x4d, 0x92, 0x1d,
	0x68, 0x33, 0x99, 0x84, 0x2d, 0x34, 0x08, 0xef, 0x1b, 0x98, 0x28, 0xe7, 0xd7, 0x05, 0xa7, 0x1a,
	0x22, 0x03, 0x08, 0x24, 0x57, 0x95, 0xcc, 0xcb, 0xb0, 0xfd, 0x03, 0xbe, 0x06, 0xc9, 0x0e, 0xb8,
	0xa5, 0xe2, 0x45, 0xe8, 0x6e, 0xb5, 0xb7, 0x57, 0x07, 0xeb, 0x8f, 0x33, 0x3a, 0x53, 0xbc, 0xa0,
	0xc8, 0x90, 0x7d, 0xf0, 0x4d, 0x6f, 0x42, 0x6f, 0xcb, 0xd9, 0x5e, 0x1d, 0xfc, 0x79, 0x9f, 0xb6,
	0x7d, 0x3b, 0xc3, 0x1f, 0x6a, 0xd1, 0xa8, 0x0f, 0x81, 0x2d, 0x8a, 0xac, 0x41, 0xbb, 0x98, 0x26,
	0x58, 0x7c, 0x87, 0xea, 0x23, 0x21, 0xe0, 0xe6, 0x6c, 0xc6, 0xb1, 0xbc, 0x0e, 0xc5, 0x73, 0xf4,
	0xc1, 0x01, 0x57, 0x07, 0x25, 0xbf, 0x83, 0x97, 0xb1, 0x11, 0xcf, 0xac, 0x81, 0x11, 0xee, 0x16,
	0xd9, 0x5a, 0xb6, 0xc8, 0xdb, 0xc4, 0xdb, 0x4b, 0x27, 0x4e, 0x76, 0xc1, 0xcb, 0x44, 0x92, 0xc6,
	0xa1, 0x8b, 0x61, 0x36, 0x1e, 0xb7, 0x66, 0xa8, 0xd5, 0xd4, 0x50, 0xd1, 0xe7, 0x16, 0x78, 0xf8,
	0x41, 0x1b, 0xf2, 0x5c, 0x71, 0x19, 0x3a, 0x18, 0xac, 0xc1, 0xf0, 0x85, 0x56, 0x53, 0x43, 0x61,
	0x1c, 0xce, 0xae, 0x74, 0x13, 0x16, 0xe0, 0x43, 0xad, 0xa6, 0x86, 0xd2, 0x03, 0xcb, 0xd2, 0x7c,
	0x6a, 0x2b, 0x69, 0x18, 0xd8, 0x30, 0xcd, 0xa7, 0x14, 0x19, 0xb2, 0x07, 0x7e, 0xc9, 0x33, 0x1e,
	0xab, 0xd0, 0x45, 0x3a, 0x6c, 0x18, 0x2f, 0xea, 0xa9, 0xe5, 0x70, 0x47, 0xab, 0x64, 0xc6, 0x73,
	0x65, 0x67, 0xdc, 0xb4, 0xa3, 0x06, 0xa0, 0x35, 0xa9, 0xc3, 0xa4, 0xf9, 0x95, 0x98, 0xf2, 0xd0,
	0x5f, 0x14, 0xe6, 0x15, 0xea, 0xa9, 0xe5, 0x74, 0x98, 0x2c, 0x55, 0x5c, 0xb2, 0x2c, 0x0c, 0x16,
	0x85, 0x19, 0x1a, 0x80, 0xd6, 0x64, 0x44, 0xc1, 0x7f, 0xc9, 0xd4, 0x05, 0x97, 0x7a, 0x6d, 0x70,
	0x69, 0xcd, 0x62, 0x98, 0xe5, 0x3c, 0x00, 0xdf, 0xdc, 0x7e, 0xbb, 0x16, 0x7f, 0x3d, 0x98, 0xb1,
	0x7d, 0x19, 0xce, 0xf0, 0x97, 0x5a, 0x36, 0x0a, 0xc0, 0xc3, 0x61, 0x44, 0x87, 0xe0, 0x61, 0x9b,
	0x75, 0x31, 0x62, 0x74, 0xa9, 0x7b, 0xe6, 0x34, 0xad, 0x97, 0xce, 0xcc, 0x64, 0x41, 0x2d, 0x17,
	0x4d, 0xc0, 0x1d, 0xda, 0x6e, 0x3f, 0xcf, 0xb2, 0x69, 0xfd, 0x49, 0x08, 0xc1, 0x4c, 0xe4, 0x6c,
	0x9c, 0xc6, 0x78, 0x89, 0x57, 0x68, 0x2d, 0x46, 0xa7, 0xe0, 0x9b, 0x69, 0xfd, 0x9a, 0x48, 0xd1,
	0x25, 0x04, 0x47, 0xb7, 0x13, 0x7c, 0xa6, 0xc3, 0x5d, 0xf0, 0x26, 0x29, 0xcf, 0xc6, 0x61, 0x0b,
	0x1f, 0x8e, 0x86, 0xad, 0x3d, 0xd1, 0x6a, 0x6a, 0xa8, 0xe8, 0x35, 0x78, 0x28, 0xcf, 0x13, 0x71,
	0xee, 0x94, 0xbc, 0x07, 0x7e, 0x82, 0xde, 0xad, 0xb3, 0x27, 0xa2, 0x1b, 0x2e, 0xfa, 0x17, 0x7c,
	0xb3, 0x51, 0x3f, 0x31, 0xae, 0xff, 0x20, 0xb0, 0xab, 0xa5, 0x8d, 0x27, 0x69, 0x52, 0x49, 0xbe,
	0xd8, 0xf8, 0x04, 0xf5, 0xd4, 0x72, 0xd1, 0x7b, 0x07, 0x7c, 0xf3, 0x49, 0x3f, 0x4f, 0x69, 0xae,
	0xfe, 0x39, 0xc0, 0x6b, 0xde, 0xa6, 0x46, 0x20, 0xeb, 0xe0, 0x97, 0x4a, 0xa6, 0x79, 0x82, 0xd7,
	0xb9, 0x43, 0xad, 0xa4, 0xeb, 0x1e, 0x09, 0x91, 0xe1, 0xb5, 0x5d, 0xa1, 0x78, 0xd6, 0xa3, 0x9e,
	0x64, 0x82, 0x69, 0x1f, 0xfa, 0x7e, 0x3a, 0xb4, 0x16, 0xc9, 0x21, 0x74, 0x94, 0x64, 0x79, 0x39,
	0x11, 0x72, 0xd6, 0xfc, 0xd8, 0xea, 0xdc, 0xce, 0x6b, 0x84, 0xde, 0xd2, 0xd1, 0x5b, 0xe8, 0xcc,
	0xbf, 0x93, 0xbf, 0x61, 0x45, 0x14, 0x5c, 0x32, 0x25, 0xea, 0xd7, 0xe8, 0x89, 0xff, 0x9c, 0x39,
	0x4a, 0x76, 0xc1, 0x9d, 0x54, 0x79, 0x6c, 0x5f, 0xa4, 0x27, 0x4c, 0x10, 0x3b, 0xde, 0xf8, 0x78,
	0xd3, 0x75, 0x3e, 0xdd, 0x74, 0x9d, 0x2f, 0x37, 0x5d, 0xe7, 0xdd, 0xd7, 0xee, 0x6f, 0x6f, 0x3c,
	0xfc, 0xeb, 0xfb, 0x1e, 0x00, 0x00, 0xff, 0xff, 0x88, 0x2e, 0x07, 0x99, 0xee, 0x07, 0x00, 0x00,
}
