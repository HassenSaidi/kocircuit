import "github.com/kocircuit/kocircuit/lib/series"
import "github.com/kocircuit/kocircuit/lib/set"

import "github.com/kocircuit/kocircuit/bootstrap/context/place" as ko_place
import "github.com/kocircuit/kocircuit/bootstrap/types"

UnifyUnion(place, unionType?, withType) {
	return: Switch(
		case: types.WhenEmpty[
			type: withType
			then: UnifyEmpty[place: place, withType: unionType]
		]
		case: types.WhenOptional[
			type: withType
			then: UnifyOptional[place: place, withType: unionType]
		]
		case: types.WhenSeries[
			type: withType
			then: UnifySeries[place: place, withType: unionType]
		]
		case: types.WhenUnion[
			type: withType
			then: UnifyUnionUnion[place: place, rightUnionType: unionType]
		]
		otherwise: ko_place.Error[
			place: place
			error: (
				unifying: "cannot unify union"
				unionType: unionType
				withType: withType
			)
		]
	)
}

UnifyUnionUnion(place, leftUnionType?, rightUnionType) {
	return: types.UnionType(
		set.Union(
			leftObjects: types.UnionTypeVarieties(leftUnionType)
			rightObjects: types.UnionTypeVarieties(rightUnionType)
			ObjectKey: types.VarietyTypeFunctional
			MergeObjects: unifyVarietiesWithSameFunctional[place: place]
		)
	)
}

// leftObject and rightObject are variety types, with the same functional.
unifyVarietiesWithSameFunctional(place, leftObject, rightObject) {
	return: types.VarietyType(
		functional: types.VarietyTypeFunctional(leftObject)
		fields: UnifyFields(
			place: place
			leftFields: types.VarietyTypeFields(leftObject)
			rightFields: types.VarietyTypeFields(rightObject)
		)
	)
}
