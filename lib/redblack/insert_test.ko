import "github.com/kocircuit/kocircuit/lib/integer"

// ko play github.com/kocircuit/kocircuit/lib/redblack/TestInsert
TestInsert() {
	tree1: Insert(value: 0, Less: testLess)
	tree2: Insert(node: tree1, value: -1, Less: testLess)
	tree3: Insert(node: tree2, value: -2, Less: testLess)
	tree4: Insert(node: tree3, value: -3, Less: testLess)
	return: And(
		Equal(
			Sweep(node: tree4, Sweeper: testSweeper)
			(-3, -2, -1, 0)
		)
		Equal(Depth(tree4), 3)
	)
}

testLess(left, right) {
	return: Less(left, right)
}

testSweeper(carry, value) {
	return: Merge(carry, value)
}

// ko play github.com/kocircuit/kocircuit/lib/redblack/TestPermuteInsert
TestPermuteInsert() {
	return: Loop(
		start: (
			pending: integer.PermuteInt64(len: 10, seed: 0)
			node: Empty()
		)
		step: testPermuteInsertStep(carry?) {
			taken: Take(carry.pending)
			return: (
				pending: taken.remainder
				node: Insert(node: carry.node, value: taken.first, Less: testLess)
			)
		}
		stop: testPermuteInsertStop(carry?) {
			return: Equal(Len(carry.pending), 0)
		}
	)
}
