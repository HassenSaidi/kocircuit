// 
// Copyright Â© 2018 Aljabr, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// 

import "github.com/kocircuit/kocircuit/lib/testing"
import "github.com/kocircuit/kocircuit/lib/strings"

// TestEqual tests the Equal function
TestEqual() {
	x: "foo"
	return: (
		t1: testing.Assert(strings.Equal(x, "foo"))
		t2: testing.Assert(Not(strings.Equal(x, "123")))
	)
}

// TestJoin tests the Join function
TestJoin() {
	return: (
		t0: testing.AssertEqual(strings.Join(), "")
		t1: testing.AssertEqual(strings.Join("a", "foo"), "afoo")
		t2: testing.AssertEqual(strings.Join(string: ("a", "B", "foo"), delimiter: ","), "a,B,foo")
	)
}

// TestLen tests the Len function
TestLen() {
	return: (
		t0: testing.AssertEqual(strings.Len(), 0)
		t2: testing.AssertEqual(strings.Len(""), 0)
		t3: testing.AssertEqual(strings.Len("a"), 1)
		t3: testing.AssertEqual(strings.Len("a", "foo"), 4)
		t4: testing.AssertEqual(strings.Len(string: ("a", "B", "foo")), 5)
	)
}

// TestQuote tests the Quote function
TestQuote() {
	return: (
		t0: testing.AssertEqual(strings.Quote(), "\"\"")
		t1: testing.AssertEqual(strings.Quote("a"), "\"a\"")
	)
}

// TestHasSuffix tests the HasSuffix function
TestHasSuffix() {
	return: (
		t0: testing.Assert(strings.HasSuffix(string: "TheBrownFox", suffix: "Fox"))
		t1: testing.Assert(Not(strings.HasSuffix(string: "TheBrownFox", suffix: "Brown")))
	)
}

// TestHasPrefix tests the HasPrefix function
TestHasPrefix() {
	return: (
		t0: testing.Assert(strings.HasPrefix(string: "TheBrownFox", prefix: "The"))
		t1: testing.Assert(Not(strings.HasPrefix(string: "TheBrownFox", prefix: "Brown")))
	)
}
