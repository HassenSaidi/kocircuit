import "github.com/kocircuit/kocircuit/lib/os"

// RunTests runs a set of test varieties.
// packages is a series of (name, tests) pairs.
// tests is a series of (name, func) pairs.
RunTests(packages?) {
	ranged: Range(
		over: packages                // range of all packages
		with: runTestPackageIterator  // iterator function
		start: (passed: 0, failed: 0) // initial carry
	)
	results: ranged.residue
	after: Show(results: results)
	exitOfFailure: Invoke(Yield(if: Equal(results.failed, 0), then: Nothing, else: os.Exit[code: 1]))
	return: ranged
}

runTestPackageIterator(carry, elem) {
	before: Show(package: elem.name)
	ranged: Range(
		over: elem.tests              // range of all tests
		with: runTestIterator         // iterator function
		start: (passed: 0, failed: 0) // initial carry
		_before: before
	)
	pkgResults: ranged.residue
	after: Show(package: elem.name, passed: pkgResults.passed, failed: pkgResults.failed)
	result: (
		passed: Sum(carry.passed, pkgResults.passed)
		failed: Sum(carry.failed, pkgResults.failed)
	)
	return: (
		carry: result
	)
}

runTestIterator(carry, elem) {
	testName: elem.name
	testResult: Recover(
		invoke: runTestRunner[testFunc: elem.func, testName: testName]
		panic: runTestFailRecover[testName: testName]
	)
	result: (
		passed: Sum(carry.passed, testResult.passed)
		failed: Sum(carry.failed, testResult.failed)
	)
	return: (
		carry: result
	)
}

runTestRunner(testFunc, testName) {
	s1: testFunc()
	s2: Show(pass: testName, _after: ignore(s1))
	return: (
		passed: 1
		failed: 0
	)
}

runTestFailRecover(panicValue?, testName) {
	s1: Show(fail: testName, error: panicValue)
	return: (
		passed: 0
		failed: 1
	)
}

ignore(value?) {
	return: Empty()
}
