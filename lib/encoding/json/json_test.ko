// 
// Copyright Â© 2018 Aljabr, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// 

import "github.com/kocircuit/kocircuit/lib/encoding/json"
import "github.com/kocircuit/kocircuit/lib/testing"

TestMarshal() {
	return: (
		t1: testing.AssertEqual(json.Marshal((x:5)), "{\"x\":5}")
		t2: testing.AssertEqual(json.Marshal((x:5.6)), "{\"x\":5.6}")
		t3: testing.AssertEqual(json.Marshal((x:true)), "{\"x\":true}")
		t4: testing.AssertEqual(json.Marshal((x:"foo")), "{\"x\":\"foo\"}")
		t5: testing.AssertEqual(json.Marshal((x:("a","b","c"))), "{\"x\":[\"a\",\"b\",\"c\"]}")
		t6: testing.AssertEqual(json.Marshal((x:56, y:("a","b","c"))), "{\"x\":56,\"y\":[\"a\",\"b\",\"c\"]}")
	)
}

TestMarshalIndent() {
	return: (
		t1: testing.AssertEqual(json.MarshalIndent((x:5)), "{\n\t\"x\": 5\n}")
		t2: testing.AssertEqual(json.MarshalIndent((x:5.6)), "{\n\t\"x\": 5.6\n}")
		t3: testing.AssertEqual(json.MarshalIndent(value: (x:true), indent: " "), "{\n \"x\": true\n}")
		t4: testing.AssertEqual(json.MarshalIndent(value: (x:"foo"), indent: "#", prefix: "-"), "{\n-#\"x\": \"foo\"\n-}")
		t5: testing.AssertEqual(json.MarshalIndent((x:("a","b","c"))), "{\n\t\"x\": [\n\t\t\"a\",\n\t\t\"b\",\n\t\t\"c\"\n\t]\n}")
		t6: testing.AssertEqual(json.MarshalIndent((x:56, y:("a","b","c"))), "{\n\t\"x\": 56,\n\t\"y\": [\n\t\t\"a\",\n\t\t\"b\",\n\t\t\"c\"\n\t]\n}")
	)
}

TestUnmarshal() {
	return: (
		t1: testing.AssertEqual(json.Unmarshal("{\"x\":5}"), (x:5.0))
		t2: testing.AssertEqual(json.Unmarshal("{\"x\":5.6}"), (x:5.6))
		t3: testing.AssertEqual(json.Unmarshal("{\"x\":true}"), (x:true))
		t4: testing.AssertEqual(json.Unmarshal("{\"x\":\"foo\"}"), (x:"foo"))
		t5: testing.AssertEqual(json.Unmarshal("{\"x\":[\"a\",\"b\",\"c\"]}"), (x:("a","b","c")))
		t6: testing.AssertEqual(json.Unmarshal("{\"x\":56,\"y\":[\"a\",\"b\",\"c\"]}"), (x:56.0, y:("a","b","c")))
	)
}

TestUnmarshalAndMarshal() {
	return: (
		t1: assertUnmarshalAndMarshal("{\"x\":5}")
		t2: assertUnmarshalAndMarshal("{\"x\":5.6}")
		t3: assertUnmarshalAndMarshal("{\"x\":true}")
		t4: assertUnmarshalAndMarshal("{\"x\":\"foo\"}")
		t5: assertUnmarshalAndMarshal("{\"x\":[\"a\",\"b\",\"c\"]}")
		t6: assertUnmarshalAndMarshal("{\"x\":56,\"y\":[\"a\",\"b\",\"c\"]}")
	)
}

assertUnmarshalAndMarshal(jsonStr?) {
	decoded1: json.Unmarshal(jsonStr)
	encoded: json.Marshal(decoded1)
	decoded2: json.Unmarshal(encoded)
	return: testing.AssertEqual(decoded1, decoded2)
}
