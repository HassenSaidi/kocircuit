--- FAIL: TestBuild (3.75s)
	build_test.go:32: test "VarietyVariety": building (os task:
		Cmd{}
		# kogo_test/Test_VarietyVariety/Main_1pak2d8/serve_test_VarietyVariety
		Main_1pak2d8/serve_test_VarietyVariety/YieldVariety_0_expand_0_serve_return_Main_1pak2d8_circuit.go:571:3: undefined: c2
		)
test.Fib(n) {
	0_leave: LEAVE(█:0_inline_0_return_0_series_1) // test.ko:4:3
	0_inline_0_return_0_series_1: INVOKE(█:0_inline_0_return_0_series_0) // test.ko:5:12
	0_inline_0_return_0_series_0: INVOKE(█:18) // test.ko:5:12
	18: AUGMENT(█:1, if:12, then:15, else:17) // test.ko:5:12
	1: Yield() // test.ko:5:12
	12: INVOKE(█:11) // test.ko:6:9
	15: AUGMENT(█:13, :14) // test.ko:10:11
	17: AUGMENT(█:16, n:0_enter_n) // test.ko:11:11
	11: AUGMENT(█:2, :6, :10) // test.ko:6:9
	13: Return() // test.ko:10:11
	14: NUMBER(lex.LexInteger:{1})() // test.ko:10:18
	16: "test".fibSum() // test.ko:11:11
	2: "boolean".Or() // test.ko:6:9
	6: INVOKE(█:5) // test.ko:7:6
	10: INVOKE(█:9) // test.ko:8:6
	5: AUGMENT(█:3, :0_enter_n, :4) // test.ko:7:6
	9: AUGMENT(█:7, :0_enter_n, :8) // test.ko:8:6
	3: "integer".Equal() // test.ko:7:6
	4: NUMBER(lex.LexInteger:{0})() // test.ko:7:23
	7: "integer".Equal() // test.ko:8:6
	0_enter_n: SELECT(n)(█:0_enter) // test.ko:4:3
	8: NUMBER(lex.LexInteger:{1})() // test.ko:8:23
	0_enter: ENTER() // test.ko:4:3
}
test.Main() {
	0_enter: ENTER() // test.ko:20:3
	0_leave: LEAVE(█:return) // test.ko:20:3
	return: INVOKE(█:8) // test.ko:21:12
	8: AUGMENT(█:1, :7) // test.ko:21:12
	1: Fix() // test.ko:21:12
	7: AUGMENT(█:2, n:6) // test.ko:22:5
	2: "test".Fib() // test.ko:22:5
	6: INVOKE(█:5) // test.ko:22:12
	5: AUGMENT(█:3, :4) // test.ko:22:12
	3: Int64() // test.ko:22:12
	4: NUMBER(lex.LexInteger:{0})() // test.ko:22:18
}
test.fibSum(n) {
	0_leave: LEAVE(█:return) // test.ko:14:3
	return: INVOKE(█:16) // test.ko:15:12
	16: AUGMENT(█:1, :8, :15) // test.ko:15:12
	1: "integer".Sum() // test.ko:15:12
	8: INVOKE(█:7) // test.ko:16:5
	15: INVOKE(█:14) // test.ko:17:5
	7: AUGMENT(█:2, n:6) // test.ko:16:5
	14: AUGMENT(█:9, n:13) // test.ko:17:5
	2: "test".Fib() // test.ko:16:5
	6: INVOKE(█:5) // test.ko:16:12
	9: "test".Fib() // test.ko:17:5
	13: INVOKE(█:12) // test.ko:17:12
	5: AUGMENT(█:3, :0_enter_n, :4) // test.ko:16:12
	12: AUGMENT(█:10, :0_enter_n, :11) // test.ko:17:12
	3: "integer".Sum() // test.ko:16:12
	4: NUMBER(lex.LexInteger:{-1})() // test.ko:16:27
	10: "integer".Sum() // test.ko:17:12
	0_enter_n: SELECT(n)(█:0_enter) // test.ko:14:3
	11: NUMBER(lex.LexInteger:{-2})() // test.ko:17:27
	0_enter: ENTER() // test.ko:14:3
}

recursions=4 iterations=7
result=Variety{
	Origin: "span:23o85bh, test.ko:21:12"
	Real: "ko//testWeave.Main_arg_2yt2eew_span_3c0s7rz_return_variety_2yt2eew_span_23o85bh"
	Macro: Call(ko//testWeave/fix_3cnuyzw.Fib_arg_3rhpbfo_span_3358lk6)
}
cp /var/folders/bm/650c2sjj227d2fbh4vh9pbmw0000gn/T/ko__/test/G
FAIL
exit status 1
FAIL	github.com/kocircuit/kocircuit/lang/go/sys	3.817s
