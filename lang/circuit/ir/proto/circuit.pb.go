// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: circuit.proto

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		circuit.proto

	It has these top-level messages:
		Repo
		Package
		Func
		ID
		Step
		Arg
		Gather
		Logic
		LogicEnter
		LogicLeave
		LogicNumber
		LogicLink
		LogicSelect
		LogicAugment
		LogicInvoke
		LogicOperator
		LogicPkgFunc
		Source
		Position
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Repo struct {
	Package          []*Package `protobuf:"bytes,1,rep,name=package" json:"package,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Repo) Reset()                    { *m = Repo{} }
func (m *Repo) String() string            { return proto1.CompactTextString(m) }
func (*Repo) ProtoMessage()               {}
func (*Repo) Descriptor() ([]byte, []int) { return fileDescriptorCircuit, []int{0} }

func (m *Repo) GetPackage() []*Package {
	if m != nil {
		return m.Package
	}
	return nil
}

type Package struct {
	Path             *string `protobuf:"bytes,1,req,name=path" json:"path,omitempty"`
	Func             []*Func `protobuf:"bytes,2,rep,name=func" json:"func,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Package) Reset()                    { *m = Package{} }
func (m *Package) String() string            { return proto1.CompactTextString(m) }
func (*Package) ProtoMessage()               {}
func (*Package) Descriptor() ([]byte, []int) { return fileDescriptorCircuit, []int{1} }

func (m *Package) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

func (m *Package) GetFunc() []*Func {
	if m != nil {
		return m.Func
	}
	return nil
}

type Func struct {
	Doc              *string `protobuf:"bytes,1,opt,name=doc" json:"doc,omitempty"`
	Id               *ID     `protobuf:"bytes,11,req,name=id" json:"id,omitempty"`
	PkgPath          *string `protobuf:"bytes,12,req,name=pkgPath" json:"pkgPath,omitempty"`
	Name             *string `protobuf:"bytes,13,req,name=name" json:"name,omitempty"`
	Step             []*Step `protobuf:"bytes,14,rep,name=step" json:"step,omitempty"`
	Enter            *string `protobuf:"bytes,15,req,name=enter" json:"enter,omitempty"`
	Arg              []*Arg  `protobuf:"bytes,16,rep,name=arg" json:"arg,omitempty"`
	Monadic          *string `protobuf:"bytes,17,opt,name=monadic" json:"monadic,omitempty"`
	Leave            *string `protobuf:"bytes,18,req,name=leave" json:"leave,omitempty"`
	Source           *Source `protobuf:"bytes,19,opt,name=source" json:"source,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Func) Reset()                    { *m = Func{} }
func (m *Func) String() string            { return proto1.CompactTextString(m) }
func (*Func) ProtoMessage()               {}
func (*Func) Descriptor() ([]byte, []int) { return fileDescriptorCircuit, []int{2} }

func (m *Func) GetDoc() string {
	if m != nil && m.Doc != nil {
		return *m.Doc
	}
	return ""
}

func (m *Func) GetId() *ID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Func) GetPkgPath() string {
	if m != nil && m.PkgPath != nil {
		return *m.PkgPath
	}
	return ""
}

func (m *Func) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Func) GetStep() []*Step {
	if m != nil {
		return m.Step
	}
	return nil
}

func (m *Func) GetEnter() string {
	if m != nil && m.Enter != nil {
		return *m.Enter
	}
	return ""
}

func (m *Func) GetArg() []*Arg {
	if m != nil {
		return m.Arg
	}
	return nil
}

func (m *Func) GetMonadic() string {
	if m != nil && m.Monadic != nil {
		return *m.Monadic
	}
	return ""
}

func (m *Func) GetLeave() string {
	if m != nil && m.Leave != nil {
		return *m.Leave
	}
	return ""
}

func (m *Func) GetSource() *Source {
	if m != nil {
		return m.Source
	}
	return nil
}

type ID struct {
	Data             *uint64 `protobuf:"varint,1,req,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ID) Reset()                    { *m = ID{} }
func (m *ID) String() string            { return proto1.CompactTextString(m) }
func (*ID) ProtoMessage()               {}
func (*ID) Descriptor() ([]byte, []int) { return fileDescriptorCircuit, []int{3} }

func (m *ID) GetData() uint64 {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return 0
}

type Step struct {
	Id               *ID       `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Label            *string   `protobuf:"bytes,2,req,name=label" json:"label,omitempty"`
	Gather           []*Gather `protobuf:"bytes,3,rep,name=gather" json:"gather,omitempty"`
	Logic            *Logic    `protobuf:"bytes,4,req,name=logic" json:"logic,omitempty"`
	Source           *Source   `protobuf:"bytes,5,opt,name=source" json:"source,omitempty"`
	PkgPath          *string   `protobuf:"bytes,6,opt,name=pkgPath" json:"pkgPath,omitempty"`
	Func             *string   `protobuf:"bytes,7,opt,name=func" json:"func,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Step) Reset()                    { *m = Step{} }
func (m *Step) String() string            { return proto1.CompactTextString(m) }
func (*Step) ProtoMessage()               {}
func (*Step) Descriptor() ([]byte, []int) { return fileDescriptorCircuit, []int{4} }

func (m *Step) GetId() *ID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Step) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *Step) GetGather() []*Gather {
	if m != nil {
		return m.Gather
	}
	return nil
}

func (m *Step) GetLogic() *Logic {
	if m != nil {
		return m.Logic
	}
	return nil
}

func (m *Step) GetSource() *Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Step) GetPkgPath() string {
	if m != nil && m.PkgPath != nil {
		return *m.PkgPath
	}
	return ""
}

func (m *Step) GetFunc() string {
	if m != nil && m.Func != nil {
		return *m.Func
	}
	return ""
}

type Arg struct {
	Name             *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Step             *string `protobuf:"bytes,2,req,name=step" json:"step,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Arg) Reset()                    { *m = Arg{} }
func (m *Arg) String() string            { return proto1.CompactTextString(m) }
func (*Arg) ProtoMessage()               {}
func (*Arg) Descriptor() ([]byte, []int) { return fileDescriptorCircuit, []int{5} }

func (m *Arg) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Arg) GetStep() string {
	if m != nil && m.Step != nil {
		return *m.Step
	}
	return ""
}

type Gather struct {
	Arg              *string `protobuf:"bytes,1,req,name=arg" json:"arg,omitempty"`
	Step             *string `protobuf:"bytes,2,req,name=step" json:"step,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Gather) Reset()                    { *m = Gather{} }
func (m *Gather) String() string            { return proto1.CompactTextString(m) }
func (*Gather) ProtoMessage()               {}
func (*Gather) Descriptor() ([]byte, []int) { return fileDescriptorCircuit, []int{6} }

func (m *Gather) GetArg() string {
	if m != nil && m.Arg != nil {
		return *m.Arg
	}
	return ""
}

func (m *Gather) GetStep() string {
	if m != nil && m.Step != nil {
		return *m.Step
	}
	return ""
}

type Logic struct {
	// Types that are valid to be assigned to Logic:
	//	*Logic_Enter
	//	*Logic_Leave
	//	*Logic_Number
	//	*Logic_Link
	//	*Logic_Select
	//	*Logic_Augment
	//	*Logic_Invoke
	//	*Logic_Operator
	//	*Logic_PkgFunc
	Logic            isLogic_Logic `protobuf_oneof:"logic"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Logic) Reset()                    { *m = Logic{} }
func (m *Logic) String() string            { return proto1.CompactTextString(m) }
func (*Logic) ProtoMessage()               {}
func (*Logic) Descriptor() ([]byte, []int) { return fileDescriptorCircuit, []int{7} }

type isLogic_Logic interface {
	isLogic_Logic()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Logic_Enter struct {
	Enter *LogicEnter `protobuf:"bytes,1,opt,name=enter,oneof"`
}
type Logic_Leave struct {
	Leave *LogicLeave `protobuf:"bytes,2,opt,name=leave,oneof"`
}
type Logic_Number struct {
	Number *LogicNumber `protobuf:"bytes,3,opt,name=number,oneof"`
}
type Logic_Link struct {
	Link *LogicLink `protobuf:"bytes,4,opt,name=link,oneof"`
}
type Logic_Select struct {
	Select *LogicSelect `protobuf:"bytes,5,opt,name=select,oneof"`
}
type Logic_Augment struct {
	Augment *LogicAugment `protobuf:"bytes,6,opt,name=augment,oneof"`
}
type Logic_Invoke struct {
	Invoke *LogicInvoke `protobuf:"bytes,7,opt,name=invoke,oneof"`
}
type Logic_Operator struct {
	Operator *LogicOperator `protobuf:"bytes,8,opt,name=operator,oneof"`
}
type Logic_PkgFunc struct {
	PkgFunc *LogicPkgFunc `protobuf:"bytes,9,opt,name=pkgFunc,oneof"`
}

func (*Logic_Enter) isLogic_Logic()    {}
func (*Logic_Leave) isLogic_Logic()    {}
func (*Logic_Number) isLogic_Logic()   {}
func (*Logic_Link) isLogic_Logic()     {}
func (*Logic_Select) isLogic_Logic()   {}
func (*Logic_Augment) isLogic_Logic()  {}
func (*Logic_Invoke) isLogic_Logic()   {}
func (*Logic_Operator) isLogic_Logic() {}
func (*Logic_PkgFunc) isLogic_Logic()  {}

func (m *Logic) GetLogic() isLogic_Logic {
	if m != nil {
		return m.Logic
	}
	return nil
}

func (m *Logic) GetEnter() *LogicEnter {
	if x, ok := m.GetLogic().(*Logic_Enter); ok {
		return x.Enter
	}
	return nil
}

func (m *Logic) GetLeave() *LogicLeave {
	if x, ok := m.GetLogic().(*Logic_Leave); ok {
		return x.Leave
	}
	return nil
}

func (m *Logic) GetNumber() *LogicNumber {
	if x, ok := m.GetLogic().(*Logic_Number); ok {
		return x.Number
	}
	return nil
}

func (m *Logic) GetLink() *LogicLink {
	if x, ok := m.GetLogic().(*Logic_Link); ok {
		return x.Link
	}
	return nil
}

func (m *Logic) GetSelect() *LogicSelect {
	if x, ok := m.GetLogic().(*Logic_Select); ok {
		return x.Select
	}
	return nil
}

func (m *Logic) GetAugment() *LogicAugment {
	if x, ok := m.GetLogic().(*Logic_Augment); ok {
		return x.Augment
	}
	return nil
}

func (m *Logic) GetInvoke() *LogicInvoke {
	if x, ok := m.GetLogic().(*Logic_Invoke); ok {
		return x.Invoke
	}
	return nil
}

func (m *Logic) GetOperator() *LogicOperator {
	if x, ok := m.GetLogic().(*Logic_Operator); ok {
		return x.Operator
	}
	return nil
}

func (m *Logic) GetPkgFunc() *LogicPkgFunc {
	if x, ok := m.GetLogic().(*Logic_PkgFunc); ok {
		return x.PkgFunc
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Logic) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _Logic_OneofMarshaler, _Logic_OneofUnmarshaler, _Logic_OneofSizer, []interface{}{
		(*Logic_Enter)(nil),
		(*Logic_Leave)(nil),
		(*Logic_Number)(nil),
		(*Logic_Link)(nil),
		(*Logic_Select)(nil),
		(*Logic_Augment)(nil),
		(*Logic_Invoke)(nil),
		(*Logic_Operator)(nil),
		(*Logic_PkgFunc)(nil),
	}
}

func _Logic_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*Logic)
	// logic
	switch x := m.Logic.(type) {
	case *Logic_Enter:
		_ = b.EncodeVarint(1<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Enter); err != nil {
			return err
		}
	case *Logic_Leave:
		_ = b.EncodeVarint(2<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Leave); err != nil {
			return err
		}
	case *Logic_Number:
		_ = b.EncodeVarint(3<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Number); err != nil {
			return err
		}
	case *Logic_Link:
		_ = b.EncodeVarint(4<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Link); err != nil {
			return err
		}
	case *Logic_Select:
		_ = b.EncodeVarint(5<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Select); err != nil {
			return err
		}
	case *Logic_Augment:
		_ = b.EncodeVarint(6<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Augment); err != nil {
			return err
		}
	case *Logic_Invoke:
		_ = b.EncodeVarint(7<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Invoke); err != nil {
			return err
		}
	case *Logic_Operator:
		_ = b.EncodeVarint(8<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Operator); err != nil {
			return err
		}
	case *Logic_PkgFunc:
		_ = b.EncodeVarint(9<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.PkgFunc); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Logic.Logic has unexpected type %T", x)
	}
	return nil
}

func _Logic_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*Logic)
	switch tag {
	case 1: // logic.enter
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(LogicEnter)
		err := b.DecodeMessage(msg)
		m.Logic = &Logic_Enter{msg}
		return true, err
	case 2: // logic.leave
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(LogicLeave)
		err := b.DecodeMessage(msg)
		m.Logic = &Logic_Leave{msg}
		return true, err
	case 3: // logic.number
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(LogicNumber)
		err := b.DecodeMessage(msg)
		m.Logic = &Logic_Number{msg}
		return true, err
	case 4: // logic.link
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(LogicLink)
		err := b.DecodeMessage(msg)
		m.Logic = &Logic_Link{msg}
		return true, err
	case 5: // logic.select
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(LogicSelect)
		err := b.DecodeMessage(msg)
		m.Logic = &Logic_Select{msg}
		return true, err
	case 6: // logic.augment
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(LogicAugment)
		err := b.DecodeMessage(msg)
		m.Logic = &Logic_Augment{msg}
		return true, err
	case 7: // logic.invoke
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(LogicInvoke)
		err := b.DecodeMessage(msg)
		m.Logic = &Logic_Invoke{msg}
		return true, err
	case 8: // logic.operator
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(LogicOperator)
		err := b.DecodeMessage(msg)
		m.Logic = &Logic_Operator{msg}
		return true, err
	case 9: // logic.pkgFunc
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(LogicPkgFunc)
		err := b.DecodeMessage(msg)
		m.Logic = &Logic_PkgFunc{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Logic_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*Logic)
	// logic
	switch x := m.Logic.(type) {
	case *Logic_Enter:
		s := proto1.Size(x.Enter)
		n += proto1.SizeVarint(1<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Logic_Leave:
		s := proto1.Size(x.Leave)
		n += proto1.SizeVarint(2<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Logic_Number:
		s := proto1.Size(x.Number)
		n += proto1.SizeVarint(3<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Logic_Link:
		s := proto1.Size(x.Link)
		n += proto1.SizeVarint(4<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Logic_Select:
		s := proto1.Size(x.Select)
		n += proto1.SizeVarint(5<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Logic_Augment:
		s := proto1.Size(x.Augment)
		n += proto1.SizeVarint(6<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Logic_Invoke:
		s := proto1.Size(x.Invoke)
		n += proto1.SizeVarint(7<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Logic_Operator:
		s := proto1.Size(x.Operator)
		n += proto1.SizeVarint(8<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Logic_PkgFunc:
		s := proto1.Size(x.PkgFunc)
		n += proto1.SizeVarint(9<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type LogicEnter struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *LogicEnter) Reset()                    { *m = LogicEnter{} }
func (m *LogicEnter) String() string            { return proto1.CompactTextString(m) }
func (*LogicEnter) ProtoMessage()               {}
func (*LogicEnter) Descriptor() ([]byte, []int) { return fileDescriptorCircuit, []int{8} }

type LogicLeave struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *LogicLeave) Reset()                    { *m = LogicLeave{} }
func (m *LogicLeave) String() string            { return proto1.CompactTextString(m) }
func (*LogicLeave) ProtoMessage()               {}
func (*LogicLeave) Descriptor() ([]byte, []int) { return fileDescriptorCircuit, []int{9} }

type LogicNumber struct {
	// Types that are valid to be assigned to Number:
	//	*LogicNumber_Bool
	//	*LogicNumber_String_
	//	*LogicNumber_Int64
	//	*LogicNumber_Float64
	Number           isLogicNumber_Number `protobuf_oneof:"number"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *LogicNumber) Reset()                    { *m = LogicNumber{} }
func (m *LogicNumber) String() string            { return proto1.CompactTextString(m) }
func (*LogicNumber) ProtoMessage()               {}
func (*LogicNumber) Descriptor() ([]byte, []int) { return fileDescriptorCircuit, []int{10} }

type isLogicNumber_Number interface {
	isLogicNumber_Number()
	MarshalTo([]byte) (int, error)
	Size() int
}

type LogicNumber_Bool struct {
	Bool bool `protobuf:"varint,1,opt,name=bool,oneof"`
}
type LogicNumber_String_ struct {
	String_ string `protobuf:"bytes,2,opt,name=string,oneof"`
}
type LogicNumber_Int64 struct {
	Int64 int64 `protobuf:"varint,3,opt,name=int64,oneof"`
}
type LogicNumber_Float64 struct {
	Float64 float64 `protobuf:"fixed64,4,opt,name=float64,oneof"`
}

func (*LogicNumber_Bool) isLogicNumber_Number()    {}
func (*LogicNumber_String_) isLogicNumber_Number() {}
func (*LogicNumber_Int64) isLogicNumber_Number()   {}
func (*LogicNumber_Float64) isLogicNumber_Number() {}

func (m *LogicNumber) GetNumber() isLogicNumber_Number {
	if m != nil {
		return m.Number
	}
	return nil
}

func (m *LogicNumber) GetBool() bool {
	if x, ok := m.GetNumber().(*LogicNumber_Bool); ok {
		return x.Bool
	}
	return false
}

func (m *LogicNumber) GetString_() string {
	if x, ok := m.GetNumber().(*LogicNumber_String_); ok {
		return x.String_
	}
	return ""
}

func (m *LogicNumber) GetInt64() int64 {
	if x, ok := m.GetNumber().(*LogicNumber_Int64); ok {
		return x.Int64
	}
	return 0
}

func (m *LogicNumber) GetFloat64() float64 {
	if x, ok := m.GetNumber().(*LogicNumber_Float64); ok {
		return x.Float64
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LogicNumber) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _LogicNumber_OneofMarshaler, _LogicNumber_OneofUnmarshaler, _LogicNumber_OneofSizer, []interface{}{
		(*LogicNumber_Bool)(nil),
		(*LogicNumber_String_)(nil),
		(*LogicNumber_Int64)(nil),
		(*LogicNumber_Float64)(nil),
	}
}

func _LogicNumber_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*LogicNumber)
	// number
	switch x := m.Number.(type) {
	case *LogicNumber_Bool:
		t := uint64(0)
		if x.Bool {
			t = 1
		}
		_ = b.EncodeVarint(1<<3 | proto1.WireVarint)
		_ = b.EncodeVarint(t)
	case *LogicNumber_String_:
		_ = b.EncodeVarint(2<<3 | proto1.WireBytes)
		_ = b.EncodeStringBytes(x.String_)
	case *LogicNumber_Int64:
		_ = b.EncodeVarint(3<<3 | proto1.WireVarint)
		_ = b.EncodeVarint(uint64(x.Int64))
	case *LogicNumber_Float64:
		_ = b.EncodeVarint(4<<3 | proto1.WireFixed64)
		_ = b.EncodeFixed64(math.Float64bits(x.Float64))
	case nil:
	default:
		return fmt.Errorf("LogicNumber.Number has unexpected type %T", x)
	}
	return nil
}

func _LogicNumber_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*LogicNumber)
	switch tag {
	case 1: // number.bool
		if wire != proto1.WireVarint {
			return true, proto1.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Number = &LogicNumber_Bool{x != 0}
		return true, err
	case 2: // number.string
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Number = &LogicNumber_String_{x}
		return true, err
	case 3: // number.int64
		if wire != proto1.WireVarint {
			return true, proto1.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Number = &LogicNumber_Int64{int64(x)}
		return true, err
	case 4: // number.float64
		if wire != proto1.WireFixed64 {
			return true, proto1.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Number = &LogicNumber_Float64{math.Float64frombits(x)}
		return true, err
	default:
		return false, nil
	}
}

func _LogicNumber_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*LogicNumber)
	// number
	switch x := m.Number.(type) {
	case *LogicNumber_Bool:
		n += proto1.SizeVarint(1<<3 | proto1.WireVarint)
		n += 1
	case *LogicNumber_String_:
		n += proto1.SizeVarint(2<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(len(x.String_)))
		n += len(x.String_)
	case *LogicNumber_Int64:
		n += proto1.SizeVarint(3<<3 | proto1.WireVarint)
		n += proto1.SizeVarint(uint64(x.Int64))
	case *LogicNumber_Float64:
		n += proto1.SizeVarint(4<<3 | proto1.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type LogicLink struct {
	Name             *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Monadic          *bool   `protobuf:"varint,2,opt,name=monadic" json:"monadic,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogicLink) Reset()                    { *m = LogicLink{} }
func (m *LogicLink) String() string            { return proto1.CompactTextString(m) }
func (*LogicLink) ProtoMessage()               {}
func (*LogicLink) Descriptor() ([]byte, []int) { return fileDescriptorCircuit, []int{11} }

func (m *LogicLink) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *LogicLink) GetMonadic() bool {
	if m != nil && m.Monadic != nil {
		return *m.Monadic
	}
	return false
}

type LogicSelect struct {
	Path             []string `protobuf:"bytes,1,rep,name=path" json:"path,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *LogicSelect) Reset()                    { *m = LogicSelect{} }
func (m *LogicSelect) String() string            { return proto1.CompactTextString(m) }
func (*LogicSelect) ProtoMessage()               {}
func (*LogicSelect) Descriptor() ([]byte, []int) { return fileDescriptorCircuit, []int{12} }

func (m *LogicSelect) GetPath() []string {
	if m != nil {
		return m.Path
	}
	return nil
}

type LogicAugment struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *LogicAugment) Reset()                    { *m = LogicAugment{} }
func (m *LogicAugment) String() string            { return proto1.CompactTextString(m) }
func (*LogicAugment) ProtoMessage()               {}
func (*LogicAugment) Descriptor() ([]byte, []int) { return fileDescriptorCircuit, []int{13} }

type LogicInvoke struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *LogicInvoke) Reset()                    { *m = LogicInvoke{} }
func (m *LogicInvoke) String() string            { return proto1.CompactTextString(m) }
func (*LogicInvoke) ProtoMessage()               {}
func (*LogicInvoke) Descriptor() ([]byte, []int) { return fileDescriptorCircuit, []int{14} }

type LogicOperator struct {
	Path             []string `protobuf:"bytes,1,rep,name=path" json:"path,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *LogicOperator) Reset()                    { *m = LogicOperator{} }
func (m *LogicOperator) String() string            { return proto1.CompactTextString(m) }
func (*LogicOperator) ProtoMessage()               {}
func (*LogicOperator) Descriptor() ([]byte, []int) { return fileDescriptorCircuit, []int{15} }

func (m *LogicOperator) GetPath() []string {
	if m != nil {
		return m.Path
	}
	return nil
}

type LogicPkgFunc struct {
	Pkg              *string `protobuf:"bytes,1,req,name=pkg" json:"pkg,omitempty"`
	Func             *string `protobuf:"bytes,2,req,name=func" json:"func,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogicPkgFunc) Reset()                    { *m = LogicPkgFunc{} }
func (m *LogicPkgFunc) String() string            { return proto1.CompactTextString(m) }
func (*LogicPkgFunc) ProtoMessage()               {}
func (*LogicPkgFunc) Descriptor() ([]byte, []int) { return fileDescriptorCircuit, []int{16} }

func (m *LogicPkgFunc) GetPkg() string {
	if m != nil && m.Pkg != nil {
		return *m.Pkg
	}
	return ""
}

func (m *LogicPkgFunc) GetFunc() string {
	if m != nil && m.Func != nil {
		return *m.Func
	}
	return ""
}

type Source struct {
	File             *string   `protobuf:"bytes,1,req,name=file" json:"file,omitempty"`
	Start            *Position `protobuf:"bytes,2,req,name=start" json:"start,omitempty"`
	End              *Position `protobuf:"bytes,3,req,name=end" json:"end,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Source) Reset()                    { *m = Source{} }
func (m *Source) String() string            { return proto1.CompactTextString(m) }
func (*Source) ProtoMessage()               {}
func (*Source) Descriptor() ([]byte, []int) { return fileDescriptorCircuit, []int{17} }

func (m *Source) GetFile() string {
	if m != nil && m.File != nil {
		return *m.File
	}
	return ""
}

func (m *Source) GetStart() *Position {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *Source) GetEnd() *Position {
	if m != nil {
		return m.End
	}
	return nil
}

type Position struct {
	Offset           *int64 `protobuf:"varint,1,req,name=offset" json:"offset,omitempty"`
	Line             *int64 `protobuf:"varint,2,req,name=line" json:"line,omitempty"`
	Column           *int64 `protobuf:"varint,3,req,name=column" json:"column,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Position) Reset()                    { *m = Position{} }
func (m *Position) String() string            { return proto1.CompactTextString(m) }
func (*Position) ProtoMessage()               {}
func (*Position) Descriptor() ([]byte, []int) { return fileDescriptorCircuit, []int{18} }

func (m *Position) GetOffset() int64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *Position) GetLine() int64 {
	if m != nil && m.Line != nil {
		return *m.Line
	}
	return 0
}

func (m *Position) GetColumn() int64 {
	if m != nil && m.Column != nil {
		return *m.Column
	}
	return 0
}

func init() {
	proto1.RegisterType((*Repo)(nil), "ko.circuit.Repo")
	proto1.RegisterType((*Package)(nil), "ko.circuit.Package")
	proto1.RegisterType((*Func)(nil), "ko.circuit.Func")
	proto1.RegisterType((*ID)(nil), "ko.circuit.ID")
	proto1.RegisterType((*Step)(nil), "ko.circuit.Step")
	proto1.RegisterType((*Arg)(nil), "ko.circuit.Arg")
	proto1.RegisterType((*Gather)(nil), "ko.circuit.Gather")
	proto1.RegisterType((*Logic)(nil), "ko.circuit.Logic")
	proto1.RegisterType((*LogicEnter)(nil), "ko.circuit.LogicEnter")
	proto1.RegisterType((*LogicLeave)(nil), "ko.circuit.LogicLeave")
	proto1.RegisterType((*LogicNumber)(nil), "ko.circuit.LogicNumber")
	proto1.RegisterType((*LogicLink)(nil), "ko.circuit.LogicLink")
	proto1.RegisterType((*LogicSelect)(nil), "ko.circuit.LogicSelect")
	proto1.RegisterType((*LogicAugment)(nil), "ko.circuit.LogicAugment")
	proto1.RegisterType((*LogicInvoke)(nil), "ko.circuit.LogicInvoke")
	proto1.RegisterType((*LogicOperator)(nil), "ko.circuit.LogicOperator")
	proto1.RegisterType((*LogicPkgFunc)(nil), "ko.circuit.LogicPkgFunc")
	proto1.RegisterType((*Source)(nil), "ko.circuit.Source")
	proto1.RegisterType((*Position)(nil), "ko.circuit.Position")
}
func (m *Repo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Repo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Package) > 0 {
		for _, msg := range m.Package {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCircuit(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Package) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Package) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Path == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(len(*m.Path)))
		i += copy(dAtA[i:], *m.Path)
	}
	if len(m.Func) > 0 {
		for _, msg := range m.Func {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCircuit(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Func) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Func) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Doc != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(len(*m.Doc)))
		i += copy(dAtA[i:], *m.Doc)
	}
	if m.Id == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(m.Id.Size()))
		n1, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.PkgPath == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(len(*m.PkgPath)))
		i += copy(dAtA[i:], *m.PkgPath)
	}
	if m.Name == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if len(m.Step) > 0 {
		for _, msg := range m.Step {
			dAtA[i] = 0x72
			i++
			i = encodeVarintCircuit(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Enter == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(len(*m.Enter)))
		i += copy(dAtA[i:], *m.Enter)
	}
	if len(m.Arg) > 0 {
		for _, msg := range m.Arg {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintCircuit(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Monadic != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(len(*m.Monadic)))
		i += copy(dAtA[i:], *m.Monadic)
	}
	if m.Leave == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(len(*m.Leave)))
		i += copy(dAtA[i:], *m.Leave)
	}
	if m.Source != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(m.Source.Size()))
		n2, err := m.Source.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(*m.Data))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Step) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Step) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(m.Id.Size()))
		n3, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Label == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(len(*m.Label)))
		i += copy(dAtA[i:], *m.Label)
	}
	if len(m.Gather) > 0 {
		for _, msg := range m.Gather {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCircuit(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Logic == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(m.Logic.Size()))
		n4, err := m.Logic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Source != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(m.Source.Size()))
		n5, err := m.Source.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.PkgPath != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(len(*m.PkgPath)))
		i += copy(dAtA[i:], *m.PkgPath)
	}
	if m.Func != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(len(*m.Func)))
		i += copy(dAtA[i:], *m.Func)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Arg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Step == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(len(*m.Step)))
		i += copy(dAtA[i:], *m.Step)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Gather) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gather) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Arg == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(len(*m.Arg)))
		i += copy(dAtA[i:], *m.Arg)
	}
	if m.Step == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(len(*m.Step)))
		i += copy(dAtA[i:], *m.Step)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Logic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Logic) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Logic != nil {
		nn6, err := m.Logic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Logic_Enter) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Enter != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(m.Enter.Size()))
		n7, err := m.Enter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Logic_Leave) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Leave != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(m.Leave.Size()))
		n8, err := m.Leave.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Logic_Number) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Number != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(m.Number.Size()))
		n9, err := m.Number.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Logic_Link) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Link != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(m.Link.Size()))
		n10, err := m.Link.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *Logic_Select) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Select != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(m.Select.Size()))
		n11, err := m.Select.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *Logic_Augment) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Augment != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(m.Augment.Size()))
		n12, err := m.Augment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *Logic_Invoke) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Invoke != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(m.Invoke.Size()))
		n13, err := m.Invoke.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *Logic_Operator) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Operator != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(m.Operator.Size()))
		n14, err := m.Operator.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *Logic_PkgFunc) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PkgFunc != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(m.PkgFunc.Size()))
		n15, err := m.PkgFunc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *LogicEnter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogicEnter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LogicLeave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogicLeave) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LogicNumber) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogicNumber) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Number != nil {
		nn16, err := m.Number.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn16
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LogicNumber_Bool) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	if m.Bool {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *LogicNumber_String_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintCircuit(dAtA, i, uint64(len(m.String_)))
	i += copy(dAtA[i:], m.String_)
	return i, nil
}
func (m *LogicNumber_Int64) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	i = encodeVarintCircuit(dAtA, i, uint64(m.Int64))
	return i, nil
}
func (m *LogicNumber_Float64) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x21
	i++
	binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Float64))))
	i += 8
	return i, nil
}
func (m *LogicLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogicLink) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Monadic != nil {
		dAtA[i] = 0x10
		i++
		if *m.Monadic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LogicSelect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogicSelect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		for _, s := range m.Path {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LogicAugment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogicAugment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LogicInvoke) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogicInvoke) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LogicOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogicOperator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		for _, s := range m.Path {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LogicPkgFunc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogicPkgFunc) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pkg == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(len(*m.Pkg)))
		i += copy(dAtA[i:], *m.Pkg)
	}
	if m.Func == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(len(*m.Func)))
		i += copy(dAtA[i:], *m.Func)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Source) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Source) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.File == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(len(*m.File)))
		i += copy(dAtA[i:], *m.File)
	}
	if m.Start == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(m.Start.Size()))
		n17, err := m.Start.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.End == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(m.End.Size()))
		n18, err := m.End.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Position) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Position) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Offset == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(*m.Offset))
	}
	if m.Line == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(*m.Line))
	}
	if m.Column == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCircuit(dAtA, i, uint64(*m.Column))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintCircuit(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Repo) Size() (n int) {
	var l int
	_ = l
	if len(m.Package) > 0 {
		for _, e := range m.Package {
			l = e.Size()
			n += 1 + l + sovCircuit(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Package) Size() (n int) {
	var l int
	_ = l
	if m.Path != nil {
		l = len(*m.Path)
		n += 1 + l + sovCircuit(uint64(l))
	}
	if len(m.Func) > 0 {
		for _, e := range m.Func {
			l = e.Size()
			n += 1 + l + sovCircuit(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Func) Size() (n int) {
	var l int
	_ = l
	if m.Doc != nil {
		l = len(*m.Doc)
		n += 1 + l + sovCircuit(uint64(l))
	}
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovCircuit(uint64(l))
	}
	if m.PkgPath != nil {
		l = len(*m.PkgPath)
		n += 1 + l + sovCircuit(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovCircuit(uint64(l))
	}
	if len(m.Step) > 0 {
		for _, e := range m.Step {
			l = e.Size()
			n += 1 + l + sovCircuit(uint64(l))
		}
	}
	if m.Enter != nil {
		l = len(*m.Enter)
		n += 1 + l + sovCircuit(uint64(l))
	}
	if len(m.Arg) > 0 {
		for _, e := range m.Arg {
			l = e.Size()
			n += 2 + l + sovCircuit(uint64(l))
		}
	}
	if m.Monadic != nil {
		l = len(*m.Monadic)
		n += 2 + l + sovCircuit(uint64(l))
	}
	if m.Leave != nil {
		l = len(*m.Leave)
		n += 2 + l + sovCircuit(uint64(l))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 2 + l + sovCircuit(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ID) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		n += 1 + sovCircuit(uint64(*m.Data))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Step) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovCircuit(uint64(l))
	}
	if m.Label != nil {
		l = len(*m.Label)
		n += 1 + l + sovCircuit(uint64(l))
	}
	if len(m.Gather) > 0 {
		for _, e := range m.Gather {
			l = e.Size()
			n += 1 + l + sovCircuit(uint64(l))
		}
	}
	if m.Logic != nil {
		l = m.Logic.Size()
		n += 1 + l + sovCircuit(uint64(l))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovCircuit(uint64(l))
	}
	if m.PkgPath != nil {
		l = len(*m.PkgPath)
		n += 1 + l + sovCircuit(uint64(l))
	}
	if m.Func != nil {
		l = len(*m.Func)
		n += 1 + l + sovCircuit(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Arg) Size() (n int) {
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovCircuit(uint64(l))
	}
	if m.Step != nil {
		l = len(*m.Step)
		n += 1 + l + sovCircuit(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Gather) Size() (n int) {
	var l int
	_ = l
	if m.Arg != nil {
		l = len(*m.Arg)
		n += 1 + l + sovCircuit(uint64(l))
	}
	if m.Step != nil {
		l = len(*m.Step)
		n += 1 + l + sovCircuit(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Logic) Size() (n int) {
	var l int
	_ = l
	if m.Logic != nil {
		n += m.Logic.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Logic_Enter) Size() (n int) {
	var l int
	_ = l
	if m.Enter != nil {
		l = m.Enter.Size()
		n += 1 + l + sovCircuit(uint64(l))
	}
	return n
}
func (m *Logic_Leave) Size() (n int) {
	var l int
	_ = l
	if m.Leave != nil {
		l = m.Leave.Size()
		n += 1 + l + sovCircuit(uint64(l))
	}
	return n
}
func (m *Logic_Number) Size() (n int) {
	var l int
	_ = l
	if m.Number != nil {
		l = m.Number.Size()
		n += 1 + l + sovCircuit(uint64(l))
	}
	return n
}
func (m *Logic_Link) Size() (n int) {
	var l int
	_ = l
	if m.Link != nil {
		l = m.Link.Size()
		n += 1 + l + sovCircuit(uint64(l))
	}
	return n
}
func (m *Logic_Select) Size() (n int) {
	var l int
	_ = l
	if m.Select != nil {
		l = m.Select.Size()
		n += 1 + l + sovCircuit(uint64(l))
	}
	return n
}
func (m *Logic_Augment) Size() (n int) {
	var l int
	_ = l
	if m.Augment != nil {
		l = m.Augment.Size()
		n += 1 + l + sovCircuit(uint64(l))
	}
	return n
}
func (m *Logic_Invoke) Size() (n int) {
	var l int
	_ = l
	if m.Invoke != nil {
		l = m.Invoke.Size()
		n += 1 + l + sovCircuit(uint64(l))
	}
	return n
}
func (m *Logic_Operator) Size() (n int) {
	var l int
	_ = l
	if m.Operator != nil {
		l = m.Operator.Size()
		n += 1 + l + sovCircuit(uint64(l))
	}
	return n
}
func (m *Logic_PkgFunc) Size() (n int) {
	var l int
	_ = l
	if m.PkgFunc != nil {
		l = m.PkgFunc.Size()
		n += 1 + l + sovCircuit(uint64(l))
	}
	return n
}
func (m *LogicEnter) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogicLeave) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogicNumber) Size() (n int) {
	var l int
	_ = l
	if m.Number != nil {
		n += m.Number.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogicNumber_Bool) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *LogicNumber_String_) Size() (n int) {
	var l int
	_ = l
	l = len(m.String_)
	n += 1 + l + sovCircuit(uint64(l))
	return n
}
func (m *LogicNumber_Int64) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCircuit(uint64(m.Int64))
	return n
}
func (m *LogicNumber_Float64) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *LogicLink) Size() (n int) {
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovCircuit(uint64(l))
	}
	if m.Monadic != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogicSelect) Size() (n int) {
	var l int
	_ = l
	if len(m.Path) > 0 {
		for _, s := range m.Path {
			l = len(s)
			n += 1 + l + sovCircuit(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogicAugment) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogicInvoke) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogicOperator) Size() (n int) {
	var l int
	_ = l
	if len(m.Path) > 0 {
		for _, s := range m.Path {
			l = len(s)
			n += 1 + l + sovCircuit(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogicPkgFunc) Size() (n int) {
	var l int
	_ = l
	if m.Pkg != nil {
		l = len(*m.Pkg)
		n += 1 + l + sovCircuit(uint64(l))
	}
	if m.Func != nil {
		l = len(*m.Func)
		n += 1 + l + sovCircuit(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Source) Size() (n int) {
	var l int
	_ = l
	if m.File != nil {
		l = len(*m.File)
		n += 1 + l + sovCircuit(uint64(l))
	}
	if m.Start != nil {
		l = m.Start.Size()
		n += 1 + l + sovCircuit(uint64(l))
	}
	if m.End != nil {
		l = m.End.Size()
		n += 1 + l + sovCircuit(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Position) Size() (n int) {
	var l int
	_ = l
	if m.Offset != nil {
		n += 1 + sovCircuit(uint64(*m.Offset))
	}
	if m.Line != nil {
		n += 1 + sovCircuit(uint64(*m.Line))
	}
	if m.Column != nil {
		n += 1 + sovCircuit(uint64(*m.Column))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCircuit(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCircuit(x uint64) (n int) {
	return sovCircuit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Repo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCircuit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Repo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Repo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Package", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Package = append(m.Package, &Package{})
			if err := m.Package[len(m.Package)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCircuit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCircuit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Package) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCircuit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Package: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Package: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Path = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Func", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Func = append(m.Func, &Func{})
			if err := m.Func[len(m.Func)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCircuit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCircuit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Func) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCircuit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Func: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Func: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Doc = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &ID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkgPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PkgPath = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = append(m.Step, &Step{})
			if err := m.Step[len(m.Step)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Enter = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arg = append(m.Arg, &Arg{})
			if err := m.Arg[len(m.Arg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monadic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Monadic = &s
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leave", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Leave = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &Source{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCircuit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCircuit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ID) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCircuit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Data = &v
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipCircuit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCircuit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Step) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCircuit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Step: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Step: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &ID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Label = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gather", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gather = append(m.Gather, &Gather{})
			if err := m.Gather[len(m.Gather)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Logic == nil {
				m.Logic = &Logic{}
			}
			if err := m.Logic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &Source{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkgPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PkgPath = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Func", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Func = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCircuit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCircuit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCircuit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Arg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Arg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Step = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipCircuit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCircuit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Gather) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCircuit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gather: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gather: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Arg = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Step = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipCircuit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCircuit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Logic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCircuit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Logic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Logic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LogicEnter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Logic = &Logic_Enter{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leave", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LogicLeave{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Logic = &Logic_Leave{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LogicNumber{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Logic = &Logic_Number{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LogicLink{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Logic = &Logic_Link{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Select", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LogicSelect{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Logic = &Logic_Select{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Augment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LogicAugment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Logic = &Logic_Augment{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invoke", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LogicInvoke{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Logic = &Logic_Invoke{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LogicOperator{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Logic = &Logic_Operator{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkgFunc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LogicPkgFunc{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Logic = &Logic_PkgFunc{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCircuit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCircuit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogicEnter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCircuit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogicEnter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogicEnter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCircuit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCircuit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogicLeave) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCircuit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogicLeave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogicLeave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCircuit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCircuit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogicNumber) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCircuit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogicNumber: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogicNumber: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Number = &LogicNumber_Bool{b}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = &LogicNumber_String_{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Number = &LogicNumber_Int64{v}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float64", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Number = &LogicNumber_Float64{float64(math.Float64frombits(v))}
		default:
			iNdEx = preIndex
			skippy, err := skipCircuit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCircuit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogicLink) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCircuit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogicLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogicLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monadic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Monadic = &b
		default:
			iNdEx = preIndex
			skippy, err := skipCircuit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCircuit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogicSelect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCircuit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogicSelect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogicSelect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = append(m.Path, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCircuit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCircuit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogicAugment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCircuit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogicAugment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogicAugment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCircuit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCircuit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogicInvoke) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCircuit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogicInvoke: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogicInvoke: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCircuit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCircuit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogicOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCircuit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogicOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogicOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = append(m.Path, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCircuit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCircuit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogicPkgFunc) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCircuit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogicPkgFunc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogicPkgFunc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pkg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Pkg = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Func", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Func = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipCircuit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCircuit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Source) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCircuit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Source: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Source: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.File = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Start == nil {
				m.Start = &Position{}
			}
			if err := m.Start.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCircuit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.End == nil {
				m.End = &Position{}
			}
			if err := m.End.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipCircuit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCircuit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Position) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCircuit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Offset = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Line", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Line = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Column = &v
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipCircuit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCircuit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCircuit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCircuit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCircuit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCircuit
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCircuit
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCircuit(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCircuit = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCircuit   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("circuit.proto", fileDescriptorCircuit) }

var fileDescriptorCircuit = []byte{
	// 835 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x55, 0x4d, 0x8f, 0x1b, 0x45,
	0x10, 0xf5, 0x7c, 0xf8, 0xab, 0xbc, 0xde, 0x6c, 0x3a, 0xcb, 0xa6, 0xe1, 0x60, 0x39, 0x03, 0x02,
	0x2b, 0x28, 0x96, 0xb0, 0x16, 0x10, 0xc7, 0x5d, 0x02, 0x78, 0xa5, 0x28, 0xac, 0x3a, 0x37, 0x6e,
	0xb3, 0xe3, 0xf6, 0x64, 0x34, 0xe3, 0xee, 0xd1, 0xb8, 0x9d, 0x0b, 0x7f, 0x84, 0x2b, 0xff, 0x86,
	0x23, 0x77, 0x2e, 0x68, 0x39, 0xf2, 0x27, 0x50, 0x55, 0xf7, 0x4c, 0xc6, 0xb2, 0x97, 0xdc, 0xba,
	0xe6, 0xbd, 0xea, 0x7a, 0x55, 0xaf, 0xbb, 0x07, 0xc6, 0x49, 0x56, 0x25, 0xbb, 0xcc, 0xcc, 0xcb,
	0x4a, 0x1b, 0xcd, 0x20, 0xd7, 0x73, 0xf7, 0x25, 0xfa, 0x1a, 0x42, 0x21, 0x4b, 0xcd, 0x5e, 0x40,
	0xbf, 0x8c, 0x93, 0x3c, 0x4e, 0x25, 0xf7, 0xa6, 0xc1, 0x6c, 0xb4, 0x78, 0x32, 0x7f, 0xcf, 0x9a,
	0xdf, 0x5a, 0x48, 0xd4, 0x9c, 0xe8, 0x7b, 0xe8, 0xbb, 0x6f, 0x8c, 0x41, 0x58, 0xc6, 0xe6, 0x2d,
	0xf7, 0xa6, 0xfe, 0x6c, 0x28, 0x68, 0xcd, 0x3e, 0x83, 0x70, 0xbd, 0x53, 0x09, 0xf7, 0x69, 0xab,
	0xb3, 0xf6, 0x56, 0x3f, 0xee, 0x54, 0x22, 0x08, 0x8d, 0x7e, 0xf7, 0x21, 0xc4, 0x90, 0x9d, 0x41,
	0xb0, 0xd2, 0x09, 0xf7, 0xa6, 0xde, 0x6c, 0x28, 0x70, 0xc9, 0x26, 0xe0, 0x67, 0x2b, 0x3e, 0x9a,
	0xfa, 0xb3, 0xd1, 0xe2, 0xb4, 0x9d, 0x7e, 0xf3, 0x52, 0xf8, 0xd9, 0x8a, 0x71, 0xe8, 0x97, 0x79,
	0x7a, 0x8b, 0x75, 0x4f, 0xa8, 0x6e, 0x1d, 0xa2, 0x1c, 0x15, 0x6f, 0x24, 0x1f, 0x5b, 0x39, 0xb8,
	0x46, 0x39, 0x5b, 0x23, 0x4b, 0x7e, 0x7a, 0x28, 0xe7, 0x8d, 0x91, 0xa5, 0x20, 0x94, 0x9d, 0x43,
	0x57, 0x2a, 0x23, 0x2b, 0xfe, 0x88, 0x52, 0x6d, 0xc0, 0x9e, 0x41, 0x10, 0x57, 0x29, 0x3f, 0xa3,
	0xd4, 0x47, 0xed, 0xd4, 0xab, 0x2a, 0x15, 0x88, 0xa1, 0x98, 0x8d, 0x56, 0xf1, 0x2a, 0x4b, 0xf8,
	0x63, 0x6a, 0xa1, 0x0e, 0x71, 0xcb, 0x42, 0xc6, 0xef, 0x24, 0x67, 0x76, 0x4b, 0x0a, 0xd8, 0x73,
	0xe8, 0x6d, 0xf5, 0xae, 0x4a, 0x24, 0x7f, 0x32, 0xf5, 0x66, 0xa3, 0x05, 0xdb, 0x13, 0x44, 0x88,
	0x70, 0x8c, 0x88, 0x83, 0x7f, 0xf3, 0x12, 0x9b, 0x5a, 0xc5, 0x26, 0xa6, 0x19, 0x87, 0x82, 0xd6,
	0xd1, 0xbf, 0x1e, 0x84, 0xa8, 0xde, 0xcd, 0xca, 0x7b, 0x70, 0x56, 0x28, 0x22, 0xbe, 0x93, 0x05,
	0xf7, 0x9d, 0x08, 0x0c, 0x50, 0x44, 0x1a, 0x9b, 0xb7, 0xb2, 0xe2, 0x01, 0xb5, 0xb6, 0x27, 0xe2,
	0x27, 0x42, 0x84, 0x63, 0xb0, 0x2f, 0xa0, 0x5b, 0xe8, 0x34, 0x4b, 0x78, 0x48, 0x45, 0x1e, 0xb7,
	0xa9, 0xaf, 0x10, 0x10, 0x16, 0x6f, 0x75, 0xd6, 0xfd, 0x50, 0x67, 0x6d, 0x0b, 0x7b, 0x76, 0x6a,
	0x2d, 0x0b, 0xe9, 0xf4, 0xf4, 0xe9, 0xb3, 0x3d, 0x2b, 0x2f, 0x20, 0xb8, 0xaa, 0xd2, 0xc6, 0x5d,
	0xaf, 0xe5, 0x2e, 0x73, 0xee, 0xda, 0xf6, 0x68, 0x1d, 0xcd, 0xa1, 0x67, 0x7b, 0xc0, 0xb3, 0x85,
	0xfe, 0xd9, 0x04, 0xb2, 0xeb, 0x18, 0xff, 0xaf, 0x00, 0xba, 0xd4, 0x09, 0x9b, 0xd7, 0xa7, 0xc0,
	0xa3, 0x0e, 0x2e, 0x0e, 0x7a, 0xfd, 0x01, 0xd1, 0x65, 0xa7, 0x3e, 0x1f, 0xf3, 0xda, 0x62, 0xff,
	0x01, 0xfe, 0x2b, 0x44, 0x91, 0x6f, 0xcd, 0xff, 0x0a, 0x7a, 0x6a, 0xb7, 0xb9, 0xa3, 0xb9, 0x63,
	0xc2, 0xd3, 0x83, 0x84, 0xd7, 0x04, 0x2f, 0x3b, 0xc2, 0x11, 0xd9, 0x97, 0x10, 0x16, 0x99, 0xca,
	0x79, 0x48, 0x09, 0x1f, 0x1d, 0x56, 0xc8, 0x54, 0xbe, 0xec, 0x08, 0x22, 0xe1, 0xfe, 0x5b, 0x59,
	0xc8, 0xc4, 0x38, 0x0b, 0x0e, 0xf7, 0x7f, 0x43, 0x30, 0xee, 0x6f, 0x89, 0xec, 0x12, 0xfa, 0xf1,
	0x2e, 0xdd, 0x48, 0x65, 0xc8, 0x89, 0xd1, 0x82, 0x1f, 0xe4, 0x5c, 0x59, 0x7c, 0xd9, 0x11, 0x35,
	0x15, 0x0b, 0x65, 0xea, 0x9d, 0xce, 0x25, 0xf9, 0x74, 0xac, 0xd0, 0x0d, 0xc1, 0x58, 0xc8, 0x12,
	0xd9, 0xb7, 0x30, 0xd0, 0xa5, 0xac, 0x62, 0xa3, 0x2b, 0x3e, 0xa0, 0xa4, 0x8f, 0x0f, 0x92, 0x7e,
	0x76, 0x84, 0x65, 0x47, 0x34, 0x64, 0x54, 0x58, 0xe6, 0x29, 0xbe, 0x15, 0x7c, 0xf8, 0x80, 0xc2,
	0x5b, 0x8b, 0xa3, 0x42, 0x47, 0xbd, 0xee, 0xbb, 0x63, 0x1b, 0x9d, 0x00, 0xbc, 0xb7, 0xae, 0x89,
	0xc8, 0x98, 0xe8, 0x57, 0x18, 0xb5, 0xa6, 0xce, 0xce, 0x21, 0xbc, 0xd3, 0xba, 0x20, 0xf7, 0x07,
	0x38, 0x54, 0x8c, 0x18, 0x87, 0xde, 0xd6, 0x54, 0x99, 0x4a, 0xc9, 0xe5, 0x21, 0xcd, 0x8e, 0x62,
	0x76, 0x01, 0xdd, 0x4c, 0x99, 0x6f, 0x2e, 0xc9, 0xcd, 0x00, 0x6d, 0xa6, 0x90, 0x7d, 0x02, 0xfd,
	0x75, 0xa1, 0x63, 0x44, 0xd0, 0x36, 0x0f, 0x75, 0xb9, 0x0f, 0xd7, 0x83, 0xfa, 0x08, 0x44, 0xdf,
	0xc1, 0xb0, 0x71, 0xf0, 0xe8, 0xd9, 0x6e, 0x3d, 0x2d, 0x58, 0x79, 0xd0, 0x3c, 0x2d, 0xd1, 0x33,
	0xa7, 0xdb, 0xba, 0xd9, 0x7a, 0x85, 0x83, 0xfa, 0x15, 0x8e, 0x4e, 0xe1, 0xa4, 0x6d, 0x5e, 0x34,
	0x76, 0x29, 0xd6, 0x97, 0xe8, 0x53, 0x18, 0xef, 0x4d, 0xfc, 0xe8, 0x1e, 0x97, 0x6e, 0x0f, 0x37,
	0x5e, 0xbc, 0x4e, 0x65, 0xde, 0x5c, 0xa7, 0x32, 0x4f, 0x9b, 0xdb, 0xea, 0xae, 0x13, 0xdd, 0xd6,
	0x12, 0x7a, 0xf6, 0xb6, 0x13, 0x9a, 0x15, 0x4d, 0x53, 0xb8, 0x66, 0xcf, 0xa1, 0xbb, 0x35, 0x71,
	0x65, 0x28, 0x65, 0xb4, 0x38, 0xdf, 0xfb, 0xd3, 0xe8, 0x6d, 0x66, 0x32, 0xad, 0x84, 0xa5, 0xb0,
	0xcf, 0x21, 0x90, 0x6a, 0xc5, 0x83, 0xff, 0x61, 0x22, 0x21, 0x7a, 0x0d, 0x83, 0xfa, 0x03, 0xbb,
	0x80, 0x9e, 0x5e, 0xaf, 0xb7, 0xd2, 0x50, 0xd5, 0x40, 0xb8, 0x08, 0xb5, 0x14, 0x99, 0x92, 0x54,
	0x36, 0xa0, 0xeb, 0x22, 0x91, 0x9b, 0xe8, 0x62, 0xb7, 0x51, 0x54, 0x22, 0x10, 0x2e, 0xba, 0x7e,
	0xfa, 0xc7, 0xfd, 0xc4, 0xfb, 0xf3, 0x7e, 0xe2, 0xfd, 0x7d, 0x3f, 0xf1, 0x7e, 0xfb, 0x67, 0xd2,
	0xf9, 0xa5, 0x4b, 0x3f, 0xcf, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xfa, 0x3f, 0xa8, 0x57, 0x4c,
	0x07, 0x00, 0x00,
}
